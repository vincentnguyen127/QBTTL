'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace Services.TimeLive.Clients
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ClientsSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class Clients
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private securedWebServiceHeaderValueField As SecuredWebServiceHeader
        
        Private AddClientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertClientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientIdByNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAssignedClientsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.TimeLive.Quickbooks.Integrator.My.MySettings.Default.TimeLive_Integration_Quickbooks_Services_TimeLive_Clients_Clients
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property SecuredWebServiceHeaderValue() As SecuredWebServiceHeader
            Get
                Return Me.securedWebServiceHeaderValueField
            End Get
            Set
                Me.securedWebServiceHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AddClientCompleted As AddClientCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientsCompleted As GetClientsCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertClientCompleted As InsertClientCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientIdCompleted As GetClientIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientIdByNameCompleted As GetClientIdByNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAssignedClientsCompleted As GetAssignedClientsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddClient", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddClient(ByVal objClient As Client) As String
            Dim results() As Object = Me.Invoke("AddClient", New Object() {objClient})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddClientAsync(ByVal objClient As Client)
            Me.AddClientAsync(objClient, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddClientAsync(ByVal objClient As Client, ByVal userState As Object)
            If (Me.AddClientOperationCompleted Is Nothing) Then
                Me.AddClientOperationCompleted = AddressOf Me.OnAddClientOperationCompleted
            End If
            Me.InvokeAsync("AddClient", New Object() {objClient}, Me.AddClientOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddClientOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddClientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddClientCompleted(Me, New AddClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClients", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClients() As Object()
            Dim results() As Object = Me.Invoke("GetClients", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientsAsync()
            Me.GetClientsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientsAsync(ByVal userState As Object)
            If (Me.GetClientsOperationCompleted Is Nothing) Then
                Me.GetClientsOperationCompleted = AddressOf Me.OnGetClientsOperationCompleted
            End If
            Me.InvokeAsync("GetClients", New Object(-1) {}, Me.GetClientsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientsCompleted(Me, New GetClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertClient", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InsertClient( _
                    ByVal ClientName As String,  _
                    ByVal ClientNick As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal CountryId As Short,  _
                    ByVal State As String,  _
                    ByVal City As String,  _
                    ByVal ZipCode As String,  _
                    ByVal Telephone1 As String,  _
                    ByVal Telephone2 As String,  _
                    ByVal Fax As String,  _
                    ByVal DefaultBillingRate As Decimal,  _
                    ByVal Website As String,  _
                    ByVal Notes As String,  _
                    ByVal IsDisabled As Boolean,  _
                    ByVal IsDeleted As Boolean,  _
                    ByVal CreatedOn As Date,  _
                    ByVal CreatedByEmployeeId As Integer,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer)
            Me.Invoke("InsertClient", New Object() {ClientName, ClientNick, EmailAddress, Address1, Address2, CountryId, State, City, ZipCode, Telephone1, Telephone2, Fax, DefaultBillingRate, Website, Notes, IsDisabled, IsDeleted, CreatedOn, CreatedByEmployeeId, ModifiedOn, ModifiedByEmployeeId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertClientAsync( _
                    ByVal ClientName As String,  _
                    ByVal ClientNick As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal CountryId As Short,  _
                    ByVal State As String,  _
                    ByVal City As String,  _
                    ByVal ZipCode As String,  _
                    ByVal Telephone1 As String,  _
                    ByVal Telephone2 As String,  _
                    ByVal Fax As String,  _
                    ByVal DefaultBillingRate As Decimal,  _
                    ByVal Website As String,  _
                    ByVal Notes As String,  _
                    ByVal IsDisabled As Boolean,  _
                    ByVal IsDeleted As Boolean,  _
                    ByVal CreatedOn As Date,  _
                    ByVal CreatedByEmployeeId As Integer,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer)
            Me.InsertClientAsync(ClientName, ClientNick, EmailAddress, Address1, Address2, CountryId, State, City, ZipCode, Telephone1, Telephone2, Fax, DefaultBillingRate, Website, Notes, IsDisabled, IsDeleted, CreatedOn, CreatedByEmployeeId, ModifiedOn, ModifiedByEmployeeId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertClientAsync( _
                    ByVal ClientName As String,  _
                    ByVal ClientNick As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal CountryId As Short,  _
                    ByVal State As String,  _
                    ByVal City As String,  _
                    ByVal ZipCode As String,  _
                    ByVal Telephone1 As String,  _
                    ByVal Telephone2 As String,  _
                    ByVal Fax As String,  _
                    ByVal DefaultBillingRate As Decimal,  _
                    ByVal Website As String,  _
                    ByVal Notes As String,  _
                    ByVal IsDisabled As Boolean,  _
                    ByVal IsDeleted As Boolean,  _
                    ByVal CreatedOn As Date,  _
                    ByVal CreatedByEmployeeId As Integer,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer,  _
                    ByVal userState As Object)
            If (Me.InsertClientOperationCompleted Is Nothing) Then
                Me.InsertClientOperationCompleted = AddressOf Me.OnInsertClientOperationCompleted
            End If
            Me.InvokeAsync("InsertClient", New Object() {ClientName, ClientNick, EmailAddress, Address1, Address2, CountryId, State, City, ZipCode, Telephone1, Telephone2, Fax, DefaultBillingRate, Website, Notes, IsDisabled, IsDeleted, CreatedOn, CreatedByEmployeeId, ModifiedOn, ModifiedByEmployeeId}, Me.InsertClientOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertClientOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertClientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertClientCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClientId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientId() As Integer
            Dim results() As Object = Me.Invoke("GetClientId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientIdAsync()
            Me.GetClientIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientIdAsync(ByVal userState As Object)
            If (Me.GetClientIdOperationCompleted Is Nothing) Then
                Me.GetClientIdOperationCompleted = AddressOf Me.OnGetClientIdOperationCompleted
            End If
            Me.InvokeAsync("GetClientId", New Object(-1) {}, Me.GetClientIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientIdCompleted(Me, New GetClientIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClientIdByName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientIdByName(ByVal ClientName As String) As Integer
            Dim results() As Object = Me.Invoke("GetClientIdByName", New Object() {ClientName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientIdByNameAsync(ByVal ClientName As String)
            Me.GetClientIdByNameAsync(ClientName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientIdByNameAsync(ByVal ClientName As String, ByVal userState As Object)
            If (Me.GetClientIdByNameOperationCompleted Is Nothing) Then
                Me.GetClientIdByNameOperationCompleted = AddressOf Me.OnGetClientIdByNameOperationCompleted
            End If
            Me.InvokeAsync("GetClientIdByName", New Object() {ClientName}, Me.GetClientIdByNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientIdByNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientIdByNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientIdByNameCompleted(Me, New GetClientIdByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAssignedClients", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAssignedClients() As Object()
            Dim results() As Object = Me.Invoke("GetAssignedClients", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAssignedClientsAsync()
            Me.GetAssignedClientsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAssignedClientsAsync(ByVal userState As Object)
            If (Me.GetAssignedClientsOperationCompleted Is Nothing) Then
                Me.GetAssignedClientsOperationCompleted = AddressOf Me.OnGetAssignedClientsOperationCompleted
            End If
            Me.InvokeAsync("GetAssignedClients", New Object(-1) {}, Me.GetAssignedClientsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAssignedClientsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAssignedClientsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAssignedClientsCompleted(Me, New GetAssignedClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://tempuri.org/", IsNullable:=false)>  _
    Partial Public Class SecuredWebServiceHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private usernameField As String
        
        Private passwordField As String
        
        Private authenticatedTokenField As String
        
        Private accountIdField As Integer
        
        Private accountEmployeeIdField As Integer
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property Username() As String
            Get
                Return Me.usernameField
            End Get
            Set
                Me.usernameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AuthenticatedToken() As String
            Get
                Return Me.authenticatedTokenField
            End Get
            Set
                Me.authenticatedTokenField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountId() As Integer
            Get
                Return Me.accountIdField
            End Get
            Set
                Me.accountIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountEmployeeId() As Integer
            Get
                Return Me.accountEmployeeIdField
            End Get
            Set
                Me.accountEmployeeIdField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Client
        
        Private accountProjectIdField As Integer
        
        Private projectNameField As String
        
        Private clientIdField As Integer
        
        Private clientNameField As String
        
        Private emailAddressField As String
        
        Private notesField As String
        
        Private telephone1Field As String
        
        Private telephone2Field As String
        
        Private faxField As String
        
        '''<remarks/>
        Public Property AccountProjectId() As Integer
            Get
                Return Me.accountProjectIdField
            End Get
            Set
                Me.accountProjectIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectName() As String
            Get
                Return Me.projectNameField
            End Get
            Set
                Me.projectNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ClientId() As Integer
            Get
                Return Me.clientIdField
            End Get
            Set
                Me.clientIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ClientName() As String
            Get
                Return Me.clientNameField
            End Get
            Set
                Me.clientNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EmailAddress() As String
            Get
                Return Me.emailAddressField
            End Get
            Set
                Me.emailAddressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notes() As String
            Get
                Return Me.notesField
            End Get
            Set
                Me.notesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Telephone1() As String
            Get
                Return Me.telephone1Field
            End Get
            Set
                Me.telephone1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Telephone2() As String
            Get
                Return Me.telephone2Field
            End Get
            Set
                Me.telephone2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fax() As String
            Get
                Return Me.faxField
            End Get
            Set
                Me.faxField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub AddClientCompletedEventHandler(ByVal sender As Object, ByVal e As AddClientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddClientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetClientsCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub InsertClientCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetClientIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetClientIdByNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientIdByNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientIdByNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetAssignedClientsCompletedEventHandler(ByVal sender As Object, ByVal e As GetAssignedClientsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAssignedClientsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
End Namespace
