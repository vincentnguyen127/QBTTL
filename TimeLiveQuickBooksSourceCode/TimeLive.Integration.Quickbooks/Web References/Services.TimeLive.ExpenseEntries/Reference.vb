'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace Services.TimeLive.ExpenseEntries
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ExpenseEntriesSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class ExpenseEntries
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private securedWebServiceHeaderValueField As SecuredWebServiceHeader
        
        Private AddExpenseEntryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExpenseEntryForMobileObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AccountCurrencyForMobileObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AccountPaymentMethodForMobileObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TaxZoneForMobileObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CurrencyExchangeForMobileObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AccountExpenseEntryForMobileObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExpenseSheetForMobileObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShowFieldsByExpenseNameForMobileObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalculateAmountByExpenseForMobileObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllExpenseEntriesByDateRangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExpenseEntriesByEmployeeIdAndDateRangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExpenseNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExpenseNamesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExpenseApprovalTypeIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExpenseSheetByDateForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExpenseEntriesByExpenseSheetIdForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExpenseEntriesByExpenseEntryIdForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExpenseNameByAccountIdForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPaymentMethodsByAccountIdForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountCurrenciesByAccountIdForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaxZoneByAccountIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExpenseTypeNameByExpenseTypeIdForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaxZoneByTaxZoneIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaxCodeByTaxCodeIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExpenseNameByExpenseIdForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReimbursementCurrencyByAccountIdForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountCurrencyByAccountCurrencyIdForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetvueAccountCurrencyByAccountIdAndDisabledOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExpenseSheetForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExpenseSheetForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExpenseEntryForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExpenseEntryForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShowFieldsByExpenseForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalculateAmountByExpenseForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitExpenseSheetAndEntryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAttachmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExpenseApprovalEntriesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExpenseApprovalsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.TimeLive.Quickbooks.Integrator.My.MySettings.Default.TimeLive_Integration_Quickbooks_Services_TimeLive_ExpenseEntries_ExpenseEntries
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property SecuredWebServiceHeaderValue() As SecuredWebServiceHeader
            Get
                Return Me.securedWebServiceHeaderValueField
            End Get
            Set
                Me.securedWebServiceHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AddExpenseEntryCompleted As AddExpenseEntryCompletedEventHandler
        
        '''<remarks/>
        Public Event ExpenseEntryForMobileObjectCompleted As ExpenseEntryForMobileObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event AccountCurrencyForMobileObjectCompleted As AccountCurrencyForMobileObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event AccountPaymentMethodForMobileObjectCompleted As AccountPaymentMethodForMobileObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event TaxZoneForMobileObjectCompleted As TaxZoneForMobileObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event CurrencyExchangeForMobileObjectCompleted As CurrencyExchangeForMobileObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event AccountExpenseEntryForMobileObjectCompleted As AccountExpenseEntryForMobileObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event ExpenseSheetForMobileObjectCompleted As ExpenseSheetForMobileObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event ShowFieldsByExpenseNameForMobileObjectCompleted As ShowFieldsByExpenseNameForMobileObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event CalculateAmountByExpenseForMobileObjectCompleted As CalculateAmountByExpenseForMobileObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllExpenseEntriesByDateRangeCompleted As GetAllExpenseEntriesByDateRangeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExpenseEntriesByEmployeeIdAndDateRangeCompleted As GetExpenseEntriesByEmployeeIdAndDateRangeCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExpenseNameCompleted As AddExpenseNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExpenseNamesCompleted As GetExpenseNamesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExpenseApprovalTypeIdCompleted As GetExpenseApprovalTypeIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExpenseSheetByDateForMobileCompleted As GetExpenseSheetByDateForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExpenseEntriesByExpenseSheetIdForMobileCompleted As GetExpenseEntriesByExpenseSheetIdForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExpenseEntriesByExpenseEntryIdForMobileCompleted As GetExpenseEntriesByExpenseEntryIdForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExpenseNameByAccountIdForMobileCompleted As GetExpenseNameByAccountIdForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPaymentMethodsByAccountIdForMobileCompleted As GetPaymentMethodsByAccountIdForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountCurrenciesByAccountIdForMobileCompleted As GetAccountCurrenciesByAccountIdForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaxZoneByAccountIdCompleted As GetTaxZoneByAccountIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExpenseTypeNameByExpenseTypeIdForMobileCompleted As GetExpenseTypeNameByExpenseTypeIdForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaxZoneByTaxZoneIdCompleted As GetTaxZoneByTaxZoneIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaxCodeByTaxCodeIdCompleted As GetTaxCodeByTaxCodeIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExpenseNameByExpenseIdForMobileCompleted As GetExpenseNameByExpenseIdForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReimbursementCurrencyByAccountIdForMobileCompleted As GetReimbursementCurrencyByAccountIdForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountCurrencyByAccountCurrencyIdForMobileCompleted As GetAccountCurrencyByAccountCurrencyIdForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetvueAccountCurrencyByAccountIdAndDisabledCompleted As GetvueAccountCurrencyByAccountIdAndDisabledCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExpenseSheetForMobileCompleted As AddExpenseSheetForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExpenseSheetForMobileCompleted As UpdateExpenseSheetForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExpenseEntryForMobileCompleted As AddExpenseEntryForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExpenseEntryForMobileCompleted As UpdateExpenseEntryForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event ShowFieldsByExpenseForMobileCompleted As ShowFieldsByExpenseForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event CalculateAmountByExpenseForMobileCompleted As CalculateAmountByExpenseForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitExpenseSheetAndEntryCompleted As SubmitExpenseSheetAndEntryCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAttachmentCompleted As AddAttachmentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExpenseApprovalEntriesCompleted As GetExpenseApprovalEntriesCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExpenseApprovalsCompleted As UpdateExpenseApprovalsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddExpenseEntry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExpenseEntry(ByVal objExpenseEntry As ExpenseEntry) As String
            Dim results() As Object = Me.Invoke("AddExpenseEntry", New Object() {objExpenseEntry})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExpenseEntryAsync(ByVal objExpenseEntry As ExpenseEntry)
            Me.AddExpenseEntryAsync(objExpenseEntry, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExpenseEntryAsync(ByVal objExpenseEntry As ExpenseEntry, ByVal userState As Object)
            If (Me.AddExpenseEntryOperationCompleted Is Nothing) Then
                Me.AddExpenseEntryOperationCompleted = AddressOf Me.OnAddExpenseEntryOperationCompleted
            End If
            Me.InvokeAsync("AddExpenseEntry", New Object() {objExpenseEntry}, Me.AddExpenseEntryOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExpenseEntryOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExpenseEntryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExpenseEntryCompleted(Me, New AddExpenseEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExpenseEntryForMobileObject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExpenseEntryForMobileObject(ByVal objExpenseEntry As ExpenseEntryListForMobile) As String
            Dim results() As Object = Me.Invoke("ExpenseEntryForMobileObject", New Object() {objExpenseEntry})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExpenseEntryForMobileObjectAsync(ByVal objExpenseEntry As ExpenseEntryListForMobile)
            Me.ExpenseEntryForMobileObjectAsync(objExpenseEntry, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExpenseEntryForMobileObjectAsync(ByVal objExpenseEntry As ExpenseEntryListForMobile, ByVal userState As Object)
            If (Me.ExpenseEntryForMobileObjectOperationCompleted Is Nothing) Then
                Me.ExpenseEntryForMobileObjectOperationCompleted = AddressOf Me.OnExpenseEntryForMobileObjectOperationCompleted
            End If
            Me.InvokeAsync("ExpenseEntryForMobileObject", New Object() {objExpenseEntry}, Me.ExpenseEntryForMobileObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnExpenseEntryForMobileObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExpenseEntryForMobileObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExpenseEntryForMobileObjectCompleted(Me, New ExpenseEntryForMobileObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AccountCurrencyForMobileObject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AccountCurrencyForMobileObject(ByVal ObjCurrency As ReimbursementCurrencyForMobile) As String
            Dim results() As Object = Me.Invoke("AccountCurrencyForMobileObject", New Object() {ObjCurrency})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AccountCurrencyForMobileObjectAsync(ByVal ObjCurrency As ReimbursementCurrencyForMobile)
            Me.AccountCurrencyForMobileObjectAsync(ObjCurrency, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AccountCurrencyForMobileObjectAsync(ByVal ObjCurrency As ReimbursementCurrencyForMobile, ByVal userState As Object)
            If (Me.AccountCurrencyForMobileObjectOperationCompleted Is Nothing) Then
                Me.AccountCurrencyForMobileObjectOperationCompleted = AddressOf Me.OnAccountCurrencyForMobileObjectOperationCompleted
            End If
            Me.InvokeAsync("AccountCurrencyForMobileObject", New Object() {ObjCurrency}, Me.AccountCurrencyForMobileObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnAccountCurrencyForMobileObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.AccountCurrencyForMobileObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AccountCurrencyForMobileObjectCompleted(Me, New AccountCurrencyForMobileObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AccountPaymentMethodForMobileObject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AccountPaymentMethodForMobileObject(ByVal objPaymentMethodList As PaymentMethodForMobile) As String
            Dim results() As Object = Me.Invoke("AccountPaymentMethodForMobileObject", New Object() {objPaymentMethodList})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AccountPaymentMethodForMobileObjectAsync(ByVal objPaymentMethodList As PaymentMethodForMobile)
            Me.AccountPaymentMethodForMobileObjectAsync(objPaymentMethodList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AccountPaymentMethodForMobileObjectAsync(ByVal objPaymentMethodList As PaymentMethodForMobile, ByVal userState As Object)
            If (Me.AccountPaymentMethodForMobileObjectOperationCompleted Is Nothing) Then
                Me.AccountPaymentMethodForMobileObjectOperationCompleted = AddressOf Me.OnAccountPaymentMethodForMobileObjectOperationCompleted
            End If
            Me.InvokeAsync("AccountPaymentMethodForMobileObject", New Object() {objPaymentMethodList}, Me.AccountPaymentMethodForMobileObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnAccountPaymentMethodForMobileObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.AccountPaymentMethodForMobileObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AccountPaymentMethodForMobileObjectCompleted(Me, New AccountPaymentMethodForMobileObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TaxZoneForMobileObject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TaxZoneForMobileObject(ByVal ObjTaxZone As TaxZoneForMobile) As String
            Dim results() As Object = Me.Invoke("TaxZoneForMobileObject", New Object() {ObjTaxZone})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TaxZoneForMobileObjectAsync(ByVal ObjTaxZone As TaxZoneForMobile)
            Me.TaxZoneForMobileObjectAsync(ObjTaxZone, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TaxZoneForMobileObjectAsync(ByVal ObjTaxZone As TaxZoneForMobile, ByVal userState As Object)
            If (Me.TaxZoneForMobileObjectOperationCompleted Is Nothing) Then
                Me.TaxZoneForMobileObjectOperationCompleted = AddressOf Me.OnTaxZoneForMobileObjectOperationCompleted
            End If
            Me.InvokeAsync("TaxZoneForMobileObject", New Object() {ObjTaxZone}, Me.TaxZoneForMobileObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnTaxZoneForMobileObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.TaxZoneForMobileObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TaxZoneForMobileObjectCompleted(Me, New TaxZoneForMobileObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CurrencyExchangeForMobileObject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CurrencyExchangeForMobileObject(ByVal ObjCurrency As AccountCurrencyForMobile) As String
            Dim results() As Object = Me.Invoke("CurrencyExchangeForMobileObject", New Object() {ObjCurrency})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CurrencyExchangeForMobileObjectAsync(ByVal ObjCurrency As AccountCurrencyForMobile)
            Me.CurrencyExchangeForMobileObjectAsync(ObjCurrency, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CurrencyExchangeForMobileObjectAsync(ByVal ObjCurrency As AccountCurrencyForMobile, ByVal userState As Object)
            If (Me.CurrencyExchangeForMobileObjectOperationCompleted Is Nothing) Then
                Me.CurrencyExchangeForMobileObjectOperationCompleted = AddressOf Me.OnCurrencyExchangeForMobileObjectOperationCompleted
            End If
            Me.InvokeAsync("CurrencyExchangeForMobileObject", New Object() {ObjCurrency}, Me.CurrencyExchangeForMobileObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnCurrencyExchangeForMobileObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.CurrencyExchangeForMobileObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CurrencyExchangeForMobileObjectCompleted(Me, New CurrencyExchangeForMobileObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AccountExpenseEntryForMobileObject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AccountExpenseEntryForMobileObject(ByVal objExpenseEntry As AccountExpenseEntryForMobile) As String
            Dim results() As Object = Me.Invoke("AccountExpenseEntryForMobileObject", New Object() {objExpenseEntry})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AccountExpenseEntryForMobileObjectAsync(ByVal objExpenseEntry As AccountExpenseEntryForMobile)
            Me.AccountExpenseEntryForMobileObjectAsync(objExpenseEntry, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AccountExpenseEntryForMobileObjectAsync(ByVal objExpenseEntry As AccountExpenseEntryForMobile, ByVal userState As Object)
            If (Me.AccountExpenseEntryForMobileObjectOperationCompleted Is Nothing) Then
                Me.AccountExpenseEntryForMobileObjectOperationCompleted = AddressOf Me.OnAccountExpenseEntryForMobileObjectOperationCompleted
            End If
            Me.InvokeAsync("AccountExpenseEntryForMobileObject", New Object() {objExpenseEntry}, Me.AccountExpenseEntryForMobileObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnAccountExpenseEntryForMobileObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.AccountExpenseEntryForMobileObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AccountExpenseEntryForMobileObjectCompleted(Me, New AccountExpenseEntryForMobileObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExpenseSheetForMobileObject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExpenseSheetForMobileObject(ByVal objExpenseSheet As ExpenseSheetListForMobile) As String
            Dim results() As Object = Me.Invoke("ExpenseSheetForMobileObject", New Object() {objExpenseSheet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExpenseSheetForMobileObjectAsync(ByVal objExpenseSheet As ExpenseSheetListForMobile)
            Me.ExpenseSheetForMobileObjectAsync(objExpenseSheet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExpenseSheetForMobileObjectAsync(ByVal objExpenseSheet As ExpenseSheetListForMobile, ByVal userState As Object)
            If (Me.ExpenseSheetForMobileObjectOperationCompleted Is Nothing) Then
                Me.ExpenseSheetForMobileObjectOperationCompleted = AddressOf Me.OnExpenseSheetForMobileObjectOperationCompleted
            End If
            Me.InvokeAsync("ExpenseSheetForMobileObject", New Object() {objExpenseSheet}, Me.ExpenseSheetForMobileObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnExpenseSheetForMobileObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExpenseSheetForMobileObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExpenseSheetForMobileObjectCompleted(Me, New ExpenseSheetForMobileObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ShowFieldsByExpenseNameForMobileObject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShowFieldsByExpenseNameForMobileObject(ByVal ObjShowFieldsByExpenseName As ShowFieldsByExpenseNameForMobile) As String
            Dim results() As Object = Me.Invoke("ShowFieldsByExpenseNameForMobileObject", New Object() {ObjShowFieldsByExpenseName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShowFieldsByExpenseNameForMobileObjectAsync(ByVal ObjShowFieldsByExpenseName As ShowFieldsByExpenseNameForMobile)
            Me.ShowFieldsByExpenseNameForMobileObjectAsync(ObjShowFieldsByExpenseName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShowFieldsByExpenseNameForMobileObjectAsync(ByVal ObjShowFieldsByExpenseName As ShowFieldsByExpenseNameForMobile, ByVal userState As Object)
            If (Me.ShowFieldsByExpenseNameForMobileObjectOperationCompleted Is Nothing) Then
                Me.ShowFieldsByExpenseNameForMobileObjectOperationCompleted = AddressOf Me.OnShowFieldsByExpenseNameForMobileObjectOperationCompleted
            End If
            Me.InvokeAsync("ShowFieldsByExpenseNameForMobileObject", New Object() {ObjShowFieldsByExpenseName}, Me.ShowFieldsByExpenseNameForMobileObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnShowFieldsByExpenseNameForMobileObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShowFieldsByExpenseNameForMobileObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShowFieldsByExpenseNameForMobileObjectCompleted(Me, New ShowFieldsByExpenseNameForMobileObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CalculateAmountByExpenseForMobileObject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalculateAmountByExpenseForMobileObject(ByVal ObjCalculateAmount As CalculateAmountByExpenseForMobile) As String
            Dim results() As Object = Me.Invoke("CalculateAmountByExpenseForMobileObject", New Object() {ObjCalculateAmount})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalculateAmountByExpenseForMobileObjectAsync(ByVal ObjCalculateAmount As CalculateAmountByExpenseForMobile)
            Me.CalculateAmountByExpenseForMobileObjectAsync(ObjCalculateAmount, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalculateAmountByExpenseForMobileObjectAsync(ByVal ObjCalculateAmount As CalculateAmountByExpenseForMobile, ByVal userState As Object)
            If (Me.CalculateAmountByExpenseForMobileObjectOperationCompleted Is Nothing) Then
                Me.CalculateAmountByExpenseForMobileObjectOperationCompleted = AddressOf Me.OnCalculateAmountByExpenseForMobileObjectOperationCompleted
            End If
            Me.InvokeAsync("CalculateAmountByExpenseForMobileObject", New Object() {ObjCalculateAmount}, Me.CalculateAmountByExpenseForMobileObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalculateAmountByExpenseForMobileObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalculateAmountByExpenseForMobileObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalculateAmountByExpenseForMobileObjectCompleted(Me, New CalculateAmountByExpenseForMobileObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllExpenseEntriesByDateRange", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllExpenseEntriesByDateRange(ByVal StartDate As Date, ByVal EndDate As Date) As Object()
            Dim results() As Object = Me.Invoke("GetAllExpenseEntriesByDateRange", New Object() {StartDate, EndDate})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllExpenseEntriesByDateRangeAsync(ByVal StartDate As Date, ByVal EndDate As Date)
            Me.GetAllExpenseEntriesByDateRangeAsync(StartDate, EndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllExpenseEntriesByDateRangeAsync(ByVal StartDate As Date, ByVal EndDate As Date, ByVal userState As Object)
            If (Me.GetAllExpenseEntriesByDateRangeOperationCompleted Is Nothing) Then
                Me.GetAllExpenseEntriesByDateRangeOperationCompleted = AddressOf Me.OnGetAllExpenseEntriesByDateRangeOperationCompleted
            End If
            Me.InvokeAsync("GetAllExpenseEntriesByDateRange", New Object() {StartDate, EndDate}, Me.GetAllExpenseEntriesByDateRangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllExpenseEntriesByDateRangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllExpenseEntriesByDateRangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllExpenseEntriesByDateRangeCompleted(Me, New GetAllExpenseEntriesByDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExpenseEntriesByEmployeeIdAndDateRange", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExpenseEntriesByEmployeeIdAndDateRange(ByVal AccountEmployeeId As Integer, ByVal StartDate As Date, ByVal EndDate As Date) As Object()
            Dim results() As Object = Me.Invoke("GetExpenseEntriesByEmployeeIdAndDateRange", New Object() {AccountEmployeeId, StartDate, EndDate})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExpenseEntriesByEmployeeIdAndDateRangeAsync(ByVal AccountEmployeeId As Integer, ByVal StartDate As Date, ByVal EndDate As Date)
            Me.GetExpenseEntriesByEmployeeIdAndDateRangeAsync(AccountEmployeeId, StartDate, EndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExpenseEntriesByEmployeeIdAndDateRangeAsync(ByVal AccountEmployeeId As Integer, ByVal StartDate As Date, ByVal EndDate As Date, ByVal userState As Object)
            If (Me.GetExpenseEntriesByEmployeeIdAndDateRangeOperationCompleted Is Nothing) Then
                Me.GetExpenseEntriesByEmployeeIdAndDateRangeOperationCompleted = AddressOf Me.OnGetExpenseEntriesByEmployeeIdAndDateRangeOperationCompleted
            End If
            Me.InvokeAsync("GetExpenseEntriesByEmployeeIdAndDateRange", New Object() {AccountEmployeeId, StartDate, EndDate}, Me.GetExpenseEntriesByEmployeeIdAndDateRangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExpenseEntriesByEmployeeIdAndDateRangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExpenseEntriesByEmployeeIdAndDateRangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExpenseEntriesByEmployeeIdAndDateRangeCompleted(Me, New GetExpenseEntriesByEmployeeIdAndDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddExpenseName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExpenseName(ByVal objExpenseName As ExpenseName) As String
            Dim results() As Object = Me.Invoke("AddExpenseName", New Object() {objExpenseName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExpenseNameAsync(ByVal objExpenseName As ExpenseName)
            Me.AddExpenseNameAsync(objExpenseName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExpenseNameAsync(ByVal objExpenseName As ExpenseName, ByVal userState As Object)
            If (Me.AddExpenseNameOperationCompleted Is Nothing) Then
                Me.AddExpenseNameOperationCompleted = AddressOf Me.OnAddExpenseNameOperationCompleted
            End If
            Me.InvokeAsync("AddExpenseName", New Object() {objExpenseName}, Me.AddExpenseNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExpenseNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExpenseNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExpenseNameCompleted(Me, New AddExpenseNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExpenseNames", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExpenseNames() As Object()
            Dim results() As Object = Me.Invoke("GetExpenseNames", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExpenseNamesAsync()
            Me.GetExpenseNamesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExpenseNamesAsync(ByVal userState As Object)
            If (Me.GetExpenseNamesOperationCompleted Is Nothing) Then
                Me.GetExpenseNamesOperationCompleted = AddressOf Me.OnGetExpenseNamesOperationCompleted
            End If
            Me.InvokeAsync("GetExpenseNames", New Object(-1) {}, Me.GetExpenseNamesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExpenseNamesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExpenseNamesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExpenseNamesCompleted(Me, New GetExpenseNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExpenseApprovalTypeId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExpenseApprovalTypeId() As Integer
            Dim results() As Object = Me.Invoke("GetExpenseApprovalTypeId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExpenseApprovalTypeIdAsync()
            Me.GetExpenseApprovalTypeIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExpenseApprovalTypeIdAsync(ByVal userState As Object)
            If (Me.GetExpenseApprovalTypeIdOperationCompleted Is Nothing) Then
                Me.GetExpenseApprovalTypeIdOperationCompleted = AddressOf Me.OnGetExpenseApprovalTypeIdOperationCompleted
            End If
            Me.InvokeAsync("GetExpenseApprovalTypeId", New Object(-1) {}, Me.GetExpenseApprovalTypeIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExpenseApprovalTypeIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExpenseApprovalTypeIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExpenseApprovalTypeIdCompleted(Me, New GetExpenseApprovalTypeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExpenseSheetByDateForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExpenseSheetByDateForMobile(ByVal YearWS As Integer, ByVal MonthWS As Integer, ByVal DayWS As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetExpenseSheetByDateForMobile", New Object() {YearWS, MonthWS, DayWS})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExpenseSheetByDateForMobileAsync(ByVal YearWS As Integer, ByVal MonthWS As Integer, ByVal DayWS As Integer)
            Me.GetExpenseSheetByDateForMobileAsync(YearWS, MonthWS, DayWS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExpenseSheetByDateForMobileAsync(ByVal YearWS As Integer, ByVal MonthWS As Integer, ByVal DayWS As Integer, ByVal userState As Object)
            If (Me.GetExpenseSheetByDateForMobileOperationCompleted Is Nothing) Then
                Me.GetExpenseSheetByDateForMobileOperationCompleted = AddressOf Me.OnGetExpenseSheetByDateForMobileOperationCompleted
            End If
            Me.InvokeAsync("GetExpenseSheetByDateForMobile", New Object() {YearWS, MonthWS, DayWS}, Me.GetExpenseSheetByDateForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExpenseSheetByDateForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExpenseSheetByDateForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExpenseSheetByDateForMobileCompleted(Me, New GetExpenseSheetByDateForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExpenseEntriesByExpenseSheetIdForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExpenseEntriesByExpenseSheetIdForMobile(ByVal AccountEmployeeExpenseSheetId As System.Guid) As Object()
            Dim results() As Object = Me.Invoke("GetExpenseEntriesByExpenseSheetIdForMobile", New Object() {AccountEmployeeExpenseSheetId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExpenseEntriesByExpenseSheetIdForMobileAsync(ByVal AccountEmployeeExpenseSheetId As System.Guid)
            Me.GetExpenseEntriesByExpenseSheetIdForMobileAsync(AccountEmployeeExpenseSheetId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExpenseEntriesByExpenseSheetIdForMobileAsync(ByVal AccountEmployeeExpenseSheetId As System.Guid, ByVal userState As Object)
            If (Me.GetExpenseEntriesByExpenseSheetIdForMobileOperationCompleted Is Nothing) Then
                Me.GetExpenseEntriesByExpenseSheetIdForMobileOperationCompleted = AddressOf Me.OnGetExpenseEntriesByExpenseSheetIdForMobileOperationCompleted
            End If
            Me.InvokeAsync("GetExpenseEntriesByExpenseSheetIdForMobile", New Object() {AccountEmployeeExpenseSheetId}, Me.GetExpenseEntriesByExpenseSheetIdForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExpenseEntriesByExpenseSheetIdForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExpenseEntriesByExpenseSheetIdForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExpenseEntriesByExpenseSheetIdForMobileCompleted(Me, New GetExpenseEntriesByExpenseSheetIdForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExpenseEntriesByExpenseEntryIdForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExpenseEntriesByExpenseEntryIdForMobile(ByVal AccountExpenseEntryId As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetExpenseEntriesByExpenseEntryIdForMobile", New Object() {AccountExpenseEntryId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExpenseEntriesByExpenseEntryIdForMobileAsync(ByVal AccountExpenseEntryId As Integer)
            Me.GetExpenseEntriesByExpenseEntryIdForMobileAsync(AccountExpenseEntryId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExpenseEntriesByExpenseEntryIdForMobileAsync(ByVal AccountExpenseEntryId As Integer, ByVal userState As Object)
            If (Me.GetExpenseEntriesByExpenseEntryIdForMobileOperationCompleted Is Nothing) Then
                Me.GetExpenseEntriesByExpenseEntryIdForMobileOperationCompleted = AddressOf Me.OnGetExpenseEntriesByExpenseEntryIdForMobileOperationCompleted
            End If
            Me.InvokeAsync("GetExpenseEntriesByExpenseEntryIdForMobile", New Object() {AccountExpenseEntryId}, Me.GetExpenseEntriesByExpenseEntryIdForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExpenseEntriesByExpenseEntryIdForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExpenseEntriesByExpenseEntryIdForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExpenseEntriesByExpenseEntryIdForMobileCompleted(Me, New GetExpenseEntriesByExpenseEntryIdForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExpenseNameByAccountIdForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExpenseNameByAccountIdForMobile() As Object()
            Dim results() As Object = Me.Invoke("GetExpenseNameByAccountIdForMobile", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExpenseNameByAccountIdForMobileAsync()
            Me.GetExpenseNameByAccountIdForMobileAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExpenseNameByAccountIdForMobileAsync(ByVal userState As Object)
            If (Me.GetExpenseNameByAccountIdForMobileOperationCompleted Is Nothing) Then
                Me.GetExpenseNameByAccountIdForMobileOperationCompleted = AddressOf Me.OnGetExpenseNameByAccountIdForMobileOperationCompleted
            End If
            Me.InvokeAsync("GetExpenseNameByAccountIdForMobile", New Object(-1) {}, Me.GetExpenseNameByAccountIdForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExpenseNameByAccountIdForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExpenseNameByAccountIdForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExpenseNameByAccountIdForMobileCompleted(Me, New GetExpenseNameByAccountIdForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPaymentMethodsByAccountIdForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPaymentMethodsByAccountIdForMobile() As Object()
            Dim results() As Object = Me.Invoke("GetPaymentMethodsByAccountIdForMobile", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPaymentMethodsByAccountIdForMobileAsync()
            Me.GetPaymentMethodsByAccountIdForMobileAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPaymentMethodsByAccountIdForMobileAsync(ByVal userState As Object)
            If (Me.GetPaymentMethodsByAccountIdForMobileOperationCompleted Is Nothing) Then
                Me.GetPaymentMethodsByAccountIdForMobileOperationCompleted = AddressOf Me.OnGetPaymentMethodsByAccountIdForMobileOperationCompleted
            End If
            Me.InvokeAsync("GetPaymentMethodsByAccountIdForMobile", New Object(-1) {}, Me.GetPaymentMethodsByAccountIdForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPaymentMethodsByAccountIdForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPaymentMethodsByAccountIdForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPaymentMethodsByAccountIdForMobileCompleted(Me, New GetPaymentMethodsByAccountIdForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountCurrenciesByAccountIdForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountCurrenciesByAccountIdForMobile() As Object()
            Dim results() As Object = Me.Invoke("GetAccountCurrenciesByAccountIdForMobile", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountCurrenciesByAccountIdForMobileAsync()
            Me.GetAccountCurrenciesByAccountIdForMobileAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountCurrenciesByAccountIdForMobileAsync(ByVal userState As Object)
            If (Me.GetAccountCurrenciesByAccountIdForMobileOperationCompleted Is Nothing) Then
                Me.GetAccountCurrenciesByAccountIdForMobileOperationCompleted = AddressOf Me.OnGetAccountCurrenciesByAccountIdForMobileOperationCompleted
            End If
            Me.InvokeAsync("GetAccountCurrenciesByAccountIdForMobile", New Object(-1) {}, Me.GetAccountCurrenciesByAccountIdForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountCurrenciesByAccountIdForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountCurrenciesByAccountIdForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountCurrenciesByAccountIdForMobileCompleted(Me, New GetAccountCurrenciesByAccountIdForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaxZoneByAccountId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaxZoneByAccountId() As Object()
            Dim results() As Object = Me.Invoke("GetTaxZoneByAccountId", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaxZoneByAccountIdAsync()
            Me.GetTaxZoneByAccountIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaxZoneByAccountIdAsync(ByVal userState As Object)
            If (Me.GetTaxZoneByAccountIdOperationCompleted Is Nothing) Then
                Me.GetTaxZoneByAccountIdOperationCompleted = AddressOf Me.OnGetTaxZoneByAccountIdOperationCompleted
            End If
            Me.InvokeAsync("GetTaxZoneByAccountId", New Object(-1) {}, Me.GetTaxZoneByAccountIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaxZoneByAccountIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaxZoneByAccountIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaxZoneByAccountIdCompleted(Me, New GetTaxZoneByAccountIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExpenseTypeNameByExpenseTypeIdForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExpenseTypeNameByExpenseTypeIdForMobile(ByVal AccountExpenseTypeId As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetExpenseTypeNameByExpenseTypeIdForMobile", New Object() {AccountExpenseTypeId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExpenseTypeNameByExpenseTypeIdForMobileAsync(ByVal AccountExpenseTypeId As Integer)
            Me.GetExpenseTypeNameByExpenseTypeIdForMobileAsync(AccountExpenseTypeId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExpenseTypeNameByExpenseTypeIdForMobileAsync(ByVal AccountExpenseTypeId As Integer, ByVal userState As Object)
            If (Me.GetExpenseTypeNameByExpenseTypeIdForMobileOperationCompleted Is Nothing) Then
                Me.GetExpenseTypeNameByExpenseTypeIdForMobileOperationCompleted = AddressOf Me.OnGetExpenseTypeNameByExpenseTypeIdForMobileOperationCompleted
            End If
            Me.InvokeAsync("GetExpenseTypeNameByExpenseTypeIdForMobile", New Object() {AccountExpenseTypeId}, Me.GetExpenseTypeNameByExpenseTypeIdForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExpenseTypeNameByExpenseTypeIdForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExpenseTypeNameByExpenseTypeIdForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExpenseTypeNameByExpenseTypeIdForMobileCompleted(Me, New GetExpenseTypeNameByExpenseTypeIdForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaxZoneByTaxZoneId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaxZoneByTaxZoneId(ByVal AccountId As Integer, ByVal AccountTaxZoneId As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetTaxZoneByTaxZoneId", New Object() {AccountId, AccountTaxZoneId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaxZoneByTaxZoneIdAsync(ByVal AccountId As Integer, ByVal AccountTaxZoneId As Integer)
            Me.GetTaxZoneByTaxZoneIdAsync(AccountId, AccountTaxZoneId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaxZoneByTaxZoneIdAsync(ByVal AccountId As Integer, ByVal AccountTaxZoneId As Integer, ByVal userState As Object)
            If (Me.GetTaxZoneByTaxZoneIdOperationCompleted Is Nothing) Then
                Me.GetTaxZoneByTaxZoneIdOperationCompleted = AddressOf Me.OnGetTaxZoneByTaxZoneIdOperationCompleted
            End If
            Me.InvokeAsync("GetTaxZoneByTaxZoneId", New Object() {AccountId, AccountTaxZoneId}, Me.GetTaxZoneByTaxZoneIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaxZoneByTaxZoneIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaxZoneByTaxZoneIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaxZoneByTaxZoneIdCompleted(Me, New GetTaxZoneByTaxZoneIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaxCodeByTaxCodeId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaxCodeByTaxCodeId(ByVal AccountId As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetTaxCodeByTaxCodeId", New Object() {AccountId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaxCodeByTaxCodeIdAsync(ByVal AccountId As Integer)
            Me.GetTaxCodeByTaxCodeIdAsync(AccountId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaxCodeByTaxCodeIdAsync(ByVal AccountId As Integer, ByVal userState As Object)
            If (Me.GetTaxCodeByTaxCodeIdOperationCompleted Is Nothing) Then
                Me.GetTaxCodeByTaxCodeIdOperationCompleted = AddressOf Me.OnGetTaxCodeByTaxCodeIdOperationCompleted
            End If
            Me.InvokeAsync("GetTaxCodeByTaxCodeId", New Object() {AccountId}, Me.GetTaxCodeByTaxCodeIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaxCodeByTaxCodeIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaxCodeByTaxCodeIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaxCodeByTaxCodeIdCompleted(Me, New GetTaxCodeByTaxCodeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExpenseNameByExpenseIdForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExpenseNameByExpenseIdForMobile(ByVal AccountExpenseId As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetExpenseNameByExpenseIdForMobile", New Object() {AccountExpenseId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExpenseNameByExpenseIdForMobileAsync(ByVal AccountExpenseId As Integer)
            Me.GetExpenseNameByExpenseIdForMobileAsync(AccountExpenseId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExpenseNameByExpenseIdForMobileAsync(ByVal AccountExpenseId As Integer, ByVal userState As Object)
            If (Me.GetExpenseNameByExpenseIdForMobileOperationCompleted Is Nothing) Then
                Me.GetExpenseNameByExpenseIdForMobileOperationCompleted = AddressOf Me.OnGetExpenseNameByExpenseIdForMobileOperationCompleted
            End If
            Me.InvokeAsync("GetExpenseNameByExpenseIdForMobile", New Object() {AccountExpenseId}, Me.GetExpenseNameByExpenseIdForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExpenseNameByExpenseIdForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExpenseNameByExpenseIdForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExpenseNameByExpenseIdForMobileCompleted(Me, New GetExpenseNameByExpenseIdForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReimbursementCurrencyByAccountIdForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReimbursementCurrencyByAccountIdForMobile() As Object()
            Dim results() As Object = Me.Invoke("GetReimbursementCurrencyByAccountIdForMobile", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReimbursementCurrencyByAccountIdForMobileAsync()
            Me.GetReimbursementCurrencyByAccountIdForMobileAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReimbursementCurrencyByAccountIdForMobileAsync(ByVal userState As Object)
            If (Me.GetReimbursementCurrencyByAccountIdForMobileOperationCompleted Is Nothing) Then
                Me.GetReimbursementCurrencyByAccountIdForMobileOperationCompleted = AddressOf Me.OnGetReimbursementCurrencyByAccountIdForMobileOperationCompleted
            End If
            Me.InvokeAsync("GetReimbursementCurrencyByAccountIdForMobile", New Object(-1) {}, Me.GetReimbursementCurrencyByAccountIdForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReimbursementCurrencyByAccountIdForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReimbursementCurrencyByAccountIdForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReimbursementCurrencyByAccountIdForMobileCompleted(Me, New GetReimbursementCurrencyByAccountIdForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountCurrencyByAccountCurrencyIdForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountCurrencyByAccountCurrencyIdForMobile(ByVal AccountCurrencyId As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetAccountCurrencyByAccountCurrencyIdForMobile", New Object() {AccountCurrencyId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountCurrencyByAccountCurrencyIdForMobileAsync(ByVal AccountCurrencyId As Integer)
            Me.GetAccountCurrencyByAccountCurrencyIdForMobileAsync(AccountCurrencyId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountCurrencyByAccountCurrencyIdForMobileAsync(ByVal AccountCurrencyId As Integer, ByVal userState As Object)
            If (Me.GetAccountCurrencyByAccountCurrencyIdForMobileOperationCompleted Is Nothing) Then
                Me.GetAccountCurrencyByAccountCurrencyIdForMobileOperationCompleted = AddressOf Me.OnGetAccountCurrencyByAccountCurrencyIdForMobileOperationCompleted
            End If
            Me.InvokeAsync("GetAccountCurrencyByAccountCurrencyIdForMobile", New Object() {AccountCurrencyId}, Me.GetAccountCurrencyByAccountCurrencyIdForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountCurrencyByAccountCurrencyIdForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountCurrencyByAccountCurrencyIdForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountCurrencyByAccountCurrencyIdForMobileCompleted(Me, New GetAccountCurrencyByAccountCurrencyIdForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetvueAccountCurrencyByAccountIdAndDisabled", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetvueAccountCurrencyByAccountIdAndDisabled(ByVal AccountId As Integer, ByVal AccountCurrencyId As Integer) As AccountCurrency.vueAccountCurrencyDataTable
            Dim results() As Object = Me.Invoke("GetvueAccountCurrencyByAccountIdAndDisabled", New Object() {AccountId, AccountCurrencyId})
            Return CType(results(0),AccountCurrency.vueAccountCurrencyDataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetvueAccountCurrencyByAccountIdAndDisabledAsync(ByVal AccountId As Integer, ByVal AccountCurrencyId As Integer)
            Me.GetvueAccountCurrencyByAccountIdAndDisabledAsync(AccountId, AccountCurrencyId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetvueAccountCurrencyByAccountIdAndDisabledAsync(ByVal AccountId As Integer, ByVal AccountCurrencyId As Integer, ByVal userState As Object)
            If (Me.GetvueAccountCurrencyByAccountIdAndDisabledOperationCompleted Is Nothing) Then
                Me.GetvueAccountCurrencyByAccountIdAndDisabledOperationCompleted = AddressOf Me.OnGetvueAccountCurrencyByAccountIdAndDisabledOperationCompleted
            End If
            Me.InvokeAsync("GetvueAccountCurrencyByAccountIdAndDisabled", New Object() {AccountId, AccountCurrencyId}, Me.GetvueAccountCurrencyByAccountIdAndDisabledOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetvueAccountCurrencyByAccountIdAndDisabledOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetvueAccountCurrencyByAccountIdAndDisabledCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetvueAccountCurrencyByAccountIdAndDisabledCompleted(Me, New GetvueAccountCurrencyByAccountIdAndDisabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddExpenseSheetForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExpenseSheetForMobile(ByVal Description As String, ByVal ExpenseSheetDate As Date, ByVal Approved As Boolean, ByVal Rejected As Boolean, ByVal Submitted As Boolean, ByVal InApproval As Boolean, ByVal SubmittedDate As Date) As System.Guid
            Dim results() As Object = Me.Invoke("AddExpenseSheetForMobile", New Object() {Description, ExpenseSheetDate, Approved, Rejected, Submitted, InApproval, SubmittedDate})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExpenseSheetForMobileAsync(ByVal Description As String, ByVal ExpenseSheetDate As Date, ByVal Approved As Boolean, ByVal Rejected As Boolean, ByVal Submitted As Boolean, ByVal InApproval As Boolean, ByVal SubmittedDate As Date)
            Me.AddExpenseSheetForMobileAsync(Description, ExpenseSheetDate, Approved, Rejected, Submitted, InApproval, SubmittedDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExpenseSheetForMobileAsync(ByVal Description As String, ByVal ExpenseSheetDate As Date, ByVal Approved As Boolean, ByVal Rejected As Boolean, ByVal Submitted As Boolean, ByVal InApproval As Boolean, ByVal SubmittedDate As Date, ByVal userState As Object)
            If (Me.AddExpenseSheetForMobileOperationCompleted Is Nothing) Then
                Me.AddExpenseSheetForMobileOperationCompleted = AddressOf Me.OnAddExpenseSheetForMobileOperationCompleted
            End If
            Me.InvokeAsync("AddExpenseSheetForMobile", New Object() {Description, ExpenseSheetDate, Approved, Rejected, Submitted, InApproval, SubmittedDate}, Me.AddExpenseSheetForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExpenseSheetForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExpenseSheetForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExpenseSheetForMobileCompleted(Me, New AddExpenseSheetForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateExpenseSheetForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateExpenseSheetForMobile(ByVal Description As String, ByVal ExpenseSheetDate As Date, ByVal Original_AccountEmployeeExpenseSheetId As System.Guid)
            Me.Invoke("UpdateExpenseSheetForMobile", New Object() {Description, ExpenseSheetDate, Original_AccountEmployeeExpenseSheetId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExpenseSheetForMobileAsync(ByVal Description As String, ByVal ExpenseSheetDate As Date, ByVal Original_AccountEmployeeExpenseSheetId As System.Guid)
            Me.UpdateExpenseSheetForMobileAsync(Description, ExpenseSheetDate, Original_AccountEmployeeExpenseSheetId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExpenseSheetForMobileAsync(ByVal Description As String, ByVal ExpenseSheetDate As Date, ByVal Original_AccountEmployeeExpenseSheetId As System.Guid, ByVal userState As Object)
            If (Me.UpdateExpenseSheetForMobileOperationCompleted Is Nothing) Then
                Me.UpdateExpenseSheetForMobileOperationCompleted = AddressOf Me.OnUpdateExpenseSheetForMobileOperationCompleted
            End If
            Me.InvokeAsync("UpdateExpenseSheetForMobile", New Object() {Description, ExpenseSheetDate, Original_AccountEmployeeExpenseSheetId}, Me.UpdateExpenseSheetForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExpenseSheetForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExpenseSheetForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExpenseSheetForMobileCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddExpenseEntryForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddExpenseEntryForMobile( _
                    ByVal YearWS As Integer,  _
                    ByVal MonthWS As Integer,  _
                    ByVal DayWS As Integer,  _
                    ByVal AccountClientId As Integer,  _
                    ByVal AccountProjectId As Integer,  _
                    ByVal AccountProjectTaskId As Integer,  _
                    ByVal AccountExpenseId As Integer,  _
                    ByVal Amount As Double,  _
                    ByVal Description As String,  _
                    ByVal IsBillable As Boolean,  _
                    ByVal Reimburse As Boolean,  _
                    ByVal AccountCurrencyId As Integer,  _
                    ByVal Quantity As Double,  _
                    ByVal Rate As Double,  _
                    ByVal AmountBeforeTax As Double,  _
                    ByVal TaxAmount As Double,  _
                    <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal AccountPaymentMethodId As System.Nullable(Of Integer),  _
                    ByVal ExchangeRate As Double,  _
                    ByVal AccountTaxZoneId As Integer,  _
                    ByVal Submitted As Boolean,  _
                    ByVal AccountEmployeeExpenseSheetId As String)
            Me.Invoke("AddExpenseEntryForMobile", New Object() {YearWS, MonthWS, DayWS, AccountClientId, AccountProjectId, AccountProjectTaskId, AccountExpenseId, Amount, Description, IsBillable, Reimburse, AccountCurrencyId, Quantity, Rate, AmountBeforeTax, TaxAmount, AccountPaymentMethodId, ExchangeRate, AccountTaxZoneId, Submitted, AccountEmployeeExpenseSheetId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExpenseEntryForMobileAsync( _
                    ByVal YearWS As Integer,  _
                    ByVal MonthWS As Integer,  _
                    ByVal DayWS As Integer,  _
                    ByVal AccountClientId As Integer,  _
                    ByVal AccountProjectId As Integer,  _
                    ByVal AccountProjectTaskId As Integer,  _
                    ByVal AccountExpenseId As Integer,  _
                    ByVal Amount As Double,  _
                    ByVal Description As String,  _
                    ByVal IsBillable As Boolean,  _
                    ByVal Reimburse As Boolean,  _
                    ByVal AccountCurrencyId As Integer,  _
                    ByVal Quantity As Double,  _
                    ByVal Rate As Double,  _
                    ByVal AmountBeforeTax As Double,  _
                    ByVal TaxAmount As Double,  _
                    ByVal AccountPaymentMethodId As System.Nullable(Of Integer),  _
                    ByVal ExchangeRate As Double,  _
                    ByVal AccountTaxZoneId As Integer,  _
                    ByVal Submitted As Boolean,  _
                    ByVal AccountEmployeeExpenseSheetId As String)
            Me.AddExpenseEntryForMobileAsync(YearWS, MonthWS, DayWS, AccountClientId, AccountProjectId, AccountProjectTaskId, AccountExpenseId, Amount, Description, IsBillable, Reimburse, AccountCurrencyId, Quantity, Rate, AmountBeforeTax, TaxAmount, AccountPaymentMethodId, ExchangeRate, AccountTaxZoneId, Submitted, AccountEmployeeExpenseSheetId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExpenseEntryForMobileAsync( _
                    ByVal YearWS As Integer,  _
                    ByVal MonthWS As Integer,  _
                    ByVal DayWS As Integer,  _
                    ByVal AccountClientId As Integer,  _
                    ByVal AccountProjectId As Integer,  _
                    ByVal AccountProjectTaskId As Integer,  _
                    ByVal AccountExpenseId As Integer,  _
                    ByVal Amount As Double,  _
                    ByVal Description As String,  _
                    ByVal IsBillable As Boolean,  _
                    ByVal Reimburse As Boolean,  _
                    ByVal AccountCurrencyId As Integer,  _
                    ByVal Quantity As Double,  _
                    ByVal Rate As Double,  _
                    ByVal AmountBeforeTax As Double,  _
                    ByVal TaxAmount As Double,  _
                    ByVal AccountPaymentMethodId As System.Nullable(Of Integer),  _
                    ByVal ExchangeRate As Double,  _
                    ByVal AccountTaxZoneId As Integer,  _
                    ByVal Submitted As Boolean,  _
                    ByVal AccountEmployeeExpenseSheetId As String,  _
                    ByVal userState As Object)
            If (Me.AddExpenseEntryForMobileOperationCompleted Is Nothing) Then
                Me.AddExpenseEntryForMobileOperationCompleted = AddressOf Me.OnAddExpenseEntryForMobileOperationCompleted
            End If
            Me.InvokeAsync("AddExpenseEntryForMobile", New Object() {YearWS, MonthWS, DayWS, AccountClientId, AccountProjectId, AccountProjectTaskId, AccountExpenseId, Amount, Description, IsBillable, Reimburse, AccountCurrencyId, Quantity, Rate, AmountBeforeTax, TaxAmount, AccountPaymentMethodId, ExchangeRate, AccountTaxZoneId, Submitted, AccountEmployeeExpenseSheetId}, Me.AddExpenseEntryForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExpenseEntryForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExpenseEntryForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExpenseEntryForMobileCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateExpenseEntryForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateExpenseEntryForMobile( _
                    ByVal YearWS As Integer,  _
                    ByVal MonthWS As Integer,  _
                    ByVal DayWS As Integer,  _
                    ByVal Original_AccountExpenseEntryId As Integer,  _
                    ByVal AccountClientId As Integer,  _
                    ByVal AccountProjectId As Integer,  _
                    ByVal AccountProjectTaskId As Integer,  _
                    ByVal AccountExpenseId As Integer,  _
                    ByVal Amount As Double,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer,  _
                    ByVal Description As String,  _
                    ByVal IsBillable As Boolean,  _
                    ByVal Reimburse As Boolean,  _
                    ByVal AccountCurrencyId As Integer,  _
                    ByVal Quantity As Double,  _
                    ByVal Rate As Double,  _
                    ByVal AmountBeforeTax As Double,  _
                    ByVal TaxAmount As Double,  _
                    <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal AccountPaymentMethodId As System.Nullable(Of Integer),  _
                    ByVal AccountTaxZoneId As Integer,  _
                    ByVal AccountEmployeeExpenseSheetId As System.Guid)
            Me.Invoke("UpdateExpenseEntryForMobile", New Object() {YearWS, MonthWS, DayWS, Original_AccountExpenseEntryId, AccountClientId, AccountProjectId, AccountProjectTaskId, AccountExpenseId, Amount, ModifiedOn, ModifiedByEmployeeId, Description, IsBillable, Reimburse, AccountCurrencyId, Quantity, Rate, AmountBeforeTax, TaxAmount, AccountPaymentMethodId, AccountTaxZoneId, AccountEmployeeExpenseSheetId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExpenseEntryForMobileAsync( _
                    ByVal YearWS As Integer,  _
                    ByVal MonthWS As Integer,  _
                    ByVal DayWS As Integer,  _
                    ByVal Original_AccountExpenseEntryId As Integer,  _
                    ByVal AccountClientId As Integer,  _
                    ByVal AccountProjectId As Integer,  _
                    ByVal AccountProjectTaskId As Integer,  _
                    ByVal AccountExpenseId As Integer,  _
                    ByVal Amount As Double,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer,  _
                    ByVal Description As String,  _
                    ByVal IsBillable As Boolean,  _
                    ByVal Reimburse As Boolean,  _
                    ByVal AccountCurrencyId As Integer,  _
                    ByVal Quantity As Double,  _
                    ByVal Rate As Double,  _
                    ByVal AmountBeforeTax As Double,  _
                    ByVal TaxAmount As Double,  _
                    ByVal AccountPaymentMethodId As System.Nullable(Of Integer),  _
                    ByVal AccountTaxZoneId As Integer,  _
                    ByVal AccountEmployeeExpenseSheetId As System.Guid)
            Me.UpdateExpenseEntryForMobileAsync(YearWS, MonthWS, DayWS, Original_AccountExpenseEntryId, AccountClientId, AccountProjectId, AccountProjectTaskId, AccountExpenseId, Amount, ModifiedOn, ModifiedByEmployeeId, Description, IsBillable, Reimburse, AccountCurrencyId, Quantity, Rate, AmountBeforeTax, TaxAmount, AccountPaymentMethodId, AccountTaxZoneId, AccountEmployeeExpenseSheetId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExpenseEntryForMobileAsync( _
                    ByVal YearWS As Integer,  _
                    ByVal MonthWS As Integer,  _
                    ByVal DayWS As Integer,  _
                    ByVal Original_AccountExpenseEntryId As Integer,  _
                    ByVal AccountClientId As Integer,  _
                    ByVal AccountProjectId As Integer,  _
                    ByVal AccountProjectTaskId As Integer,  _
                    ByVal AccountExpenseId As Integer,  _
                    ByVal Amount As Double,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer,  _
                    ByVal Description As String,  _
                    ByVal IsBillable As Boolean,  _
                    ByVal Reimburse As Boolean,  _
                    ByVal AccountCurrencyId As Integer,  _
                    ByVal Quantity As Double,  _
                    ByVal Rate As Double,  _
                    ByVal AmountBeforeTax As Double,  _
                    ByVal TaxAmount As Double,  _
                    ByVal AccountPaymentMethodId As System.Nullable(Of Integer),  _
                    ByVal AccountTaxZoneId As Integer,  _
                    ByVal AccountEmployeeExpenseSheetId As System.Guid,  _
                    ByVal userState As Object)
            If (Me.UpdateExpenseEntryForMobileOperationCompleted Is Nothing) Then
                Me.UpdateExpenseEntryForMobileOperationCompleted = AddressOf Me.OnUpdateExpenseEntryForMobileOperationCompleted
            End If
            Me.InvokeAsync("UpdateExpenseEntryForMobile", New Object() {YearWS, MonthWS, DayWS, Original_AccountExpenseEntryId, AccountClientId, AccountProjectId, AccountProjectTaskId, AccountExpenseId, Amount, ModifiedOn, ModifiedByEmployeeId, Description, IsBillable, Reimburse, AccountCurrencyId, Quantity, Rate, AmountBeforeTax, TaxAmount, AccountPaymentMethodId, AccountTaxZoneId, AccountEmployeeExpenseSheetId}, Me.UpdateExpenseEntryForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExpenseEntryForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExpenseEntryForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExpenseEntryForMobileCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ShowFieldsByExpenseForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShowFieldsByExpenseForMobile(ByVal AccountExpenseId As Integer) As Object()
            Dim results() As Object = Me.Invoke("ShowFieldsByExpenseForMobile", New Object() {AccountExpenseId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShowFieldsByExpenseForMobileAsync(ByVal AccountExpenseId As Integer)
            Me.ShowFieldsByExpenseForMobileAsync(AccountExpenseId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShowFieldsByExpenseForMobileAsync(ByVal AccountExpenseId As Integer, ByVal userState As Object)
            If (Me.ShowFieldsByExpenseForMobileOperationCompleted Is Nothing) Then
                Me.ShowFieldsByExpenseForMobileOperationCompleted = AddressOf Me.OnShowFieldsByExpenseForMobileOperationCompleted
            End If
            Me.InvokeAsync("ShowFieldsByExpenseForMobile", New Object() {AccountExpenseId}, Me.ShowFieldsByExpenseForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnShowFieldsByExpenseForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShowFieldsByExpenseForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShowFieldsByExpenseForMobileCompleted(Me, New ShowFieldsByExpenseForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CalculateAmountByExpenseForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalculateAmountByExpenseForMobile(ByVal AccountExpenseId As Integer, ByVal AccountTaxZoneId As Integer, ByVal Quantity As Double, ByVal Rate As Double, ByVal TaxAmount As Double, ByVal NetAmount As Double, ByVal Amount As Double) As Object()
            Dim results() As Object = Me.Invoke("CalculateAmountByExpenseForMobile", New Object() {AccountExpenseId, AccountTaxZoneId, Quantity, Rate, TaxAmount, NetAmount, Amount})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalculateAmountByExpenseForMobileAsync(ByVal AccountExpenseId As Integer, ByVal AccountTaxZoneId As Integer, ByVal Quantity As Double, ByVal Rate As Double, ByVal TaxAmount As Double, ByVal NetAmount As Double, ByVal Amount As Double)
            Me.CalculateAmountByExpenseForMobileAsync(AccountExpenseId, AccountTaxZoneId, Quantity, Rate, TaxAmount, NetAmount, Amount, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalculateAmountByExpenseForMobileAsync(ByVal AccountExpenseId As Integer, ByVal AccountTaxZoneId As Integer, ByVal Quantity As Double, ByVal Rate As Double, ByVal TaxAmount As Double, ByVal NetAmount As Double, ByVal Amount As Double, ByVal userState As Object)
            If (Me.CalculateAmountByExpenseForMobileOperationCompleted Is Nothing) Then
                Me.CalculateAmountByExpenseForMobileOperationCompleted = AddressOf Me.OnCalculateAmountByExpenseForMobileOperationCompleted
            End If
            Me.InvokeAsync("CalculateAmountByExpenseForMobile", New Object() {AccountExpenseId, AccountTaxZoneId, Quantity, Rate, TaxAmount, NetAmount, Amount}, Me.CalculateAmountByExpenseForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalculateAmountByExpenseForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalculateAmountByExpenseForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalculateAmountByExpenseForMobileCompleted(Me, New CalculateAmountByExpenseForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubmitExpenseSheetAndEntry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitExpenseSheetAndEntry(ByVal AccountEmployeeExpenseSheetId As String) As String
            Dim results() As Object = Me.Invoke("SubmitExpenseSheetAndEntry", New Object() {AccountEmployeeExpenseSheetId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitExpenseSheetAndEntryAsync(ByVal AccountEmployeeExpenseSheetId As String)
            Me.SubmitExpenseSheetAndEntryAsync(AccountEmployeeExpenseSheetId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitExpenseSheetAndEntryAsync(ByVal AccountEmployeeExpenseSheetId As String, ByVal userState As Object)
            If (Me.SubmitExpenseSheetAndEntryOperationCompleted Is Nothing) Then
                Me.SubmitExpenseSheetAndEntryOperationCompleted = AddressOf Me.OnSubmitExpenseSheetAndEntryOperationCompleted
            End If
            Me.InvokeAsync("SubmitExpenseSheetAndEntry", New Object() {AccountEmployeeExpenseSheetId}, Me.SubmitExpenseSheetAndEntryOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitExpenseSheetAndEntryOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitExpenseSheetAndEntryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitExpenseSheetAndEntryCompleted(Me, New SubmitExpenseSheetAndEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAttachment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAttachment(ByVal AccountExpenseEntryId As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ExpenseAttachment() As Byte, ByVal FileName As String) As String
            Dim results() As Object = Me.Invoke("AddAttachment", New Object() {AccountExpenseEntryId, ExpenseAttachment, FileName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAttachmentAsync(ByVal AccountExpenseEntryId As Integer, ByVal ExpenseAttachment() As Byte, ByVal FileName As String)
            Me.AddAttachmentAsync(AccountExpenseEntryId, ExpenseAttachment, FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAttachmentAsync(ByVal AccountExpenseEntryId As Integer, ByVal ExpenseAttachment() As Byte, ByVal FileName As String, ByVal userState As Object)
            If (Me.AddAttachmentOperationCompleted Is Nothing) Then
                Me.AddAttachmentOperationCompleted = AddressOf Me.OnAddAttachmentOperationCompleted
            End If
            Me.InvokeAsync("AddAttachment", New Object() {AccountExpenseEntryId, ExpenseAttachment, FileName}, Me.AddAttachmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAttachmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAttachmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAttachmentCompleted(Me, New AddAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExpenseApprovalEntries", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExpenseApprovalEntries() As Object()
            Dim results() As Object = Me.Invoke("GetExpenseApprovalEntries", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExpenseApprovalEntriesAsync()
            Me.GetExpenseApprovalEntriesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExpenseApprovalEntriesAsync(ByVal userState As Object)
            If (Me.GetExpenseApprovalEntriesOperationCompleted Is Nothing) Then
                Me.GetExpenseApprovalEntriesOperationCompleted = AddressOf Me.OnGetExpenseApprovalEntriesOperationCompleted
            End If
            Me.InvokeAsync("GetExpenseApprovalEntries", New Object(-1) {}, Me.GetExpenseApprovalEntriesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExpenseApprovalEntriesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExpenseApprovalEntriesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExpenseApprovalEntriesCompleted(Me, New GetExpenseApprovalEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateExpenseApprovals", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExpenseApprovals(ByVal ApprovalList() As Object) As String
            Dim results() As Object = Me.Invoke("UpdateExpenseApprovals", New Object() {ApprovalList})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExpenseApprovalsAsync(ByVal ApprovalList() As Object)
            Me.UpdateExpenseApprovalsAsync(ApprovalList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExpenseApprovalsAsync(ByVal ApprovalList() As Object, ByVal userState As Object)
            If (Me.UpdateExpenseApprovalsOperationCompleted Is Nothing) Then
                Me.UpdateExpenseApprovalsOperationCompleted = AddressOf Me.OnUpdateExpenseApprovalsOperationCompleted
            End If
            Me.InvokeAsync("UpdateExpenseApprovals", New Object() {ApprovalList}, Me.UpdateExpenseApprovalsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExpenseApprovalsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExpenseApprovalsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExpenseApprovalsCompleted(Me, New UpdateExpenseApprovalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://tempuri.org/", IsNullable:=false)>  _
    Partial Public Class SecuredWebServiceHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private usernameField As String
        
        Private passwordField As String
        
        Private authenticatedTokenField As String
        
        Private accountIdField As Integer
        
        Private accountEmployeeIdField As Integer
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property Username() As String
            Get
                Return Me.usernameField
            End Get
            Set
                Me.usernameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AuthenticatedToken() As String
            Get
                Return Me.authenticatedTokenField
            End Get
            Set
                Me.authenticatedTokenField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountId() As Integer
            Get
                Return Me.accountIdField
            End Get
            Set
                Me.accountIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountEmployeeId() As Integer
            Get
                Return Me.accountEmployeeIdField
            End Get
            Set
                Me.accountEmployeeIdField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ExpenseName
        
        Private expenseName1Field As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute("ExpenseName")>  _
        Public Property ExpenseName1() As String
            Get
                Return Me.expenseName1Field
            End Get
            Set
                Me.expenseName1Field = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class CalculateAmountByExpenseForMobile
        
        Private taxAmountField As Double
        
        Private netAmountField As Double
        
        Private amountField As Double
        
        '''<remarks/>
        Public Property TaxAmount() As Double
            Get
                Return Me.taxAmountField
            End Get
            Set
                Me.taxAmountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetAmount() As Double
            Get
                Return Me.netAmountField
            End Get
            Set
                Me.netAmountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Amount() As Double
            Get
                Return Me.amountField
            End Get
            Set
                Me.amountField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ShowFieldsByExpenseNameForMobile
        
        Private showQuantityField As Boolean
        
        Private showQuantityCaptionField As String
        
        Private showRateField As Boolean
        
        Private showTaxCodeField As Boolean
        
        Private taxCodeCaptionField As String
        
        Private showNetAmountField As Boolean
        
        Private showTaxZoneField As Boolean
        
        '''<remarks/>
        Public Property ShowQuantity() As Boolean
            Get
                Return Me.showQuantityField
            End Get
            Set
                Me.showQuantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShowQuantityCaption() As String
            Get
                Return Me.showQuantityCaptionField
            End Get
            Set
                Me.showQuantityCaptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShowRate() As Boolean
            Get
                Return Me.showRateField
            End Get
            Set
                Me.showRateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShowTaxCode() As Boolean
            Get
                Return Me.showTaxCodeField
            End Get
            Set
                Me.showTaxCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TaxCodeCaption() As String
            Get
                Return Me.taxCodeCaptionField
            End Get
            Set
                Me.taxCodeCaptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShowNetAmount() As Boolean
            Get
                Return Me.showNetAmountField
            End Get
            Set
                Me.showNetAmountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShowTaxZone() As Boolean
            Get
                Return Me.showTaxZoneField
            End Get
            Set
                Me.showTaxZoneField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ExpenseSheetListForMobile
        
        Private accountEmployeeExpenseSheetIdField As String
        
        Private expenseSheetDateField As String
        
        Private descriptionField As String
        
        Private currencyCodeField As String
        
        Private amountField As String
        
        Private statusField As String
        
        Private accountEmployeeIdField As Integer
        
        Private isShowClientField As Boolean
        
        Private isShowTaskField As Boolean
        
        '''<remarks/>
        Public Property AccountEmployeeExpenseSheetId() As String
            Get
                Return Me.accountEmployeeExpenseSheetIdField
            End Get
            Set
                Me.accountEmployeeExpenseSheetIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpenseSheetDate() As String
            Get
                Return Me.expenseSheetDateField
            End Get
            Set
                Me.expenseSheetDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CurrencyCode() As String
            Get
                Return Me.currencyCodeField
            End Get
            Set
                Me.currencyCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Amount() As String
            Get
                Return Me.amountField
            End Get
            Set
                Me.amountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountEmployeeId() As Integer
            Get
                Return Me.accountEmployeeIdField
            End Get
            Set
                Me.accountEmployeeIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsShowClient() As Boolean
            Get
                Return Me.isShowClientField
            End Get
            Set
                Me.isShowClientField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsShowTask() As Boolean
            Get
                Return Me.isShowTaskField
            End Get
            Set
                Me.isShowTaskField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class AccountExpenseEntryForMobile
        
        Private accountEmployeeExpenseSheetIdField As String
        
        Private accountExpenseEntryIdField As Integer
        
        Private expenseSheetDescriptionField As String
        
        Private accountIdField As Integer
        
        Private accountEmployeeIdField As Integer
        
        Private accountClientIdField As Integer
        
        Private accountProjectIdField As Integer
        
        Private accountProjectTaskIdField As Integer
        
        Private accountExpenseIdField As Integer
        
        Private expenseEntryDescriptionField As String
        
        Private accountExpenseEntryDateField As Date
        
        Private paymentMethodIdField As Integer
        
        Private accountCurrencyIdField As Integer
        
        Private netAmountField As Double
        
        Private amountField As Double
        
        Private reimburseField As Boolean
        
        Private billableField As Boolean
        
        Private accountTaxZoneIdField As Integer
        
        Private quantityField As Double
        
        Private rateField As Double
        
        Private taxAmountField As Double
        
        Private isShowClientField As Boolean
        
        Private isShowTaskField As Boolean
        
        '''<remarks/>
        Public Property AccountEmployeeExpenseSheetId() As String
            Get
                Return Me.accountEmployeeExpenseSheetIdField
            End Get
            Set
                Me.accountEmployeeExpenseSheetIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountExpenseEntryId() As Integer
            Get
                Return Me.accountExpenseEntryIdField
            End Get
            Set
                Me.accountExpenseEntryIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpenseSheetDescription() As String
            Get
                Return Me.expenseSheetDescriptionField
            End Get
            Set
                Me.expenseSheetDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountId() As Integer
            Get
                Return Me.accountIdField
            End Get
            Set
                Me.accountIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountEmployeeId() As Integer
            Get
                Return Me.accountEmployeeIdField
            End Get
            Set
                Me.accountEmployeeIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountClientId() As Integer
            Get
                Return Me.accountClientIdField
            End Get
            Set
                Me.accountClientIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountProjectId() As Integer
            Get
                Return Me.accountProjectIdField
            End Get
            Set
                Me.accountProjectIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountProjectTaskId() As Integer
            Get
                Return Me.accountProjectTaskIdField
            End Get
            Set
                Me.accountProjectTaskIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountExpenseId() As Integer
            Get
                Return Me.accountExpenseIdField
            End Get
            Set
                Me.accountExpenseIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpenseEntryDescription() As String
            Get
                Return Me.expenseEntryDescriptionField
            End Get
            Set
                Me.expenseEntryDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountExpenseEntryDate() As Date
            Get
                Return Me.accountExpenseEntryDateField
            End Get
            Set
                Me.accountExpenseEntryDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PaymentMethodId() As Integer
            Get
                Return Me.paymentMethodIdField
            End Get
            Set
                Me.paymentMethodIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountCurrencyId() As Integer
            Get
                Return Me.accountCurrencyIdField
            End Get
            Set
                Me.accountCurrencyIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetAmount() As Double
            Get
                Return Me.netAmountField
            End Get
            Set
                Me.netAmountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Amount() As Double
            Get
                Return Me.amountField
            End Get
            Set
                Me.amountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Reimburse() As Boolean
            Get
                Return Me.reimburseField
            End Get
            Set
                Me.reimburseField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Billable() As Boolean
            Get
                Return Me.billableField
            End Get
            Set
                Me.billableField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountTaxZoneId() As Integer
            Get
                Return Me.accountTaxZoneIdField
            End Get
            Set
                Me.accountTaxZoneIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Quantity() As Double
            Get
                Return Me.quantityField
            End Get
            Set
                Me.quantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Rate() As Double
            Get
                Return Me.rateField
            End Get
            Set
                Me.rateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TaxAmount() As Double
            Get
                Return Me.taxAmountField
            End Get
            Set
                Me.taxAmountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsShowClient() As Boolean
            Get
                Return Me.isShowClientField
            End Get
            Set
                Me.isShowClientField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsShowTask() As Boolean
            Get
                Return Me.isShowTaskField
            End Get
            Set
                Me.isShowTaskField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class AccountCurrencyForMobile
        
        Private exchangeRateIdField As Integer
        
        '''<remarks/>
        Public Property ExchangeRateId() As Integer
            Get
                Return Me.exchangeRateIdField
            End Get
            Set
                Me.exchangeRateIdField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class TaxZoneForMobile
        
        Private taxZoneIdField As Integer
        
        Private taxZoneField As String
        
        '''<remarks/>
        Public Property TaxZoneId() As Integer
            Get
                Return Me.taxZoneIdField
            End Get
            Set
                Me.taxZoneIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TaxZone() As String
            Get
                Return Me.taxZoneField
            End Get
            Set
                Me.taxZoneField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class PaymentMethodForMobile
        
        Private accountPaymentMethodIdField As Integer
        
        Private paymentMethodField As String
        
        '''<remarks/>
        Public Property AccountPaymentMethodId() As Integer
            Get
                Return Me.accountPaymentMethodIdField
            End Get
            Set
                Me.accountPaymentMethodIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PaymentMethod() As String
            Get
                Return Me.paymentMethodField
            End Get
            Set
                Me.paymentMethodField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ReimbursementCurrencyForMobile
        
        Private exchangeRateIdField As Integer
        
        Private accountCurrencyIdField As Integer
        
        Private currencyCodeField As String
        
        '''<remarks/>
        Public Property ExchangeRateId() As Integer
            Get
                Return Me.exchangeRateIdField
            End Get
            Set
                Me.exchangeRateIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountCurrencyId() As Integer
            Get
                Return Me.accountCurrencyIdField
            End Get
            Set
                Me.accountCurrencyIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CurrencyCode() As String
            Get
                Return Me.currencyCodeField
            End Get
            Set
                Me.currencyCodeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ExpenseEntryListForMobile
        
        Private accountEmployeeExpenseSheetIdField As String
        
        Private accountExpenseEntryIdField As Integer
        
        Private accountExpenseIdField As Integer
        
        Private accountExpenseNameField As String
        
        Private expenseEntryDescriptionField As String
        
        Private expenseEntryAmountField As Double
        
        Private expenseEntryCurrencyCodeField As String
        
        Private accountTaxCodeIdField As Integer
        
        Private accountTaxZoneIdField As Integer
        
        Private accountPaymentMethodIdField As Integer
        
        Private accountClientIdField As Integer
        
        Private accountProjectIdField As Integer
        
        Private accountProjectTaskIdField As Integer
        
        Private netAmountField As Double
        
        Private reimburseField As Boolean
        
        Private billableField As Boolean
        
        Private quantityField As Double
        
        Private rateField As Double
        
        Private taxAmountField As Double
        
        Private isShowClientField As Boolean
        
        Private isShowTaskField As Boolean
        
        '''<remarks/>
        Public Property AccountEmployeeExpenseSheetId() As String
            Get
                Return Me.accountEmployeeExpenseSheetIdField
            End Get
            Set
                Me.accountEmployeeExpenseSheetIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountExpenseEntryId() As Integer
            Get
                Return Me.accountExpenseEntryIdField
            End Get
            Set
                Me.accountExpenseEntryIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountExpenseId() As Integer
            Get
                Return Me.accountExpenseIdField
            End Get
            Set
                Me.accountExpenseIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountExpenseName() As String
            Get
                Return Me.accountExpenseNameField
            End Get
            Set
                Me.accountExpenseNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpenseEntryDescription() As String
            Get
                Return Me.expenseEntryDescriptionField
            End Get
            Set
                Me.expenseEntryDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpenseEntryAmount() As Double
            Get
                Return Me.expenseEntryAmountField
            End Get
            Set
                Me.expenseEntryAmountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpenseEntryCurrencyCode() As String
            Get
                Return Me.expenseEntryCurrencyCodeField
            End Get
            Set
                Me.expenseEntryCurrencyCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountTaxCodeId() As Integer
            Get
                Return Me.accountTaxCodeIdField
            End Get
            Set
                Me.accountTaxCodeIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountTaxZoneId() As Integer
            Get
                Return Me.accountTaxZoneIdField
            End Get
            Set
                Me.accountTaxZoneIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountPaymentMethodId() As Integer
            Get
                Return Me.accountPaymentMethodIdField
            End Get
            Set
                Me.accountPaymentMethodIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountClientId() As Integer
            Get
                Return Me.accountClientIdField
            End Get
            Set
                Me.accountClientIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountProjectId() As Integer
            Get
                Return Me.accountProjectIdField
            End Get
            Set
                Me.accountProjectIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountProjectTaskId() As Integer
            Get
                Return Me.accountProjectTaskIdField
            End Get
            Set
                Me.accountProjectTaskIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetAmount() As Double
            Get
                Return Me.netAmountField
            End Get
            Set
                Me.netAmountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Reimburse() As Boolean
            Get
                Return Me.reimburseField
            End Get
            Set
                Me.reimburseField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Billable() As Boolean
            Get
                Return Me.billableField
            End Get
            Set
                Me.billableField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Quantity() As Double
            Get
                Return Me.quantityField
            End Get
            Set
                Me.quantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Rate() As Double
            Get
                Return Me.rateField
            End Get
            Set
                Me.rateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TaxAmount() As Double
            Get
                Return Me.taxAmountField
            End Get
            Set
                Me.taxAmountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsShowClient() As Boolean
            Get
                Return Me.isShowClientField
            End Get
            Set
                Me.isShowClientField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsShowTask() As Boolean
            Get
                Return Me.isShowTaskField
            End Get
            Set
                Me.isShowTaskField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ExpenseEntry
        
        Private employeeNameField As String
        
        Private clientWithProjectField As String
        
        Private expenseEntryDateField As Date
        
        Private amountField As Double
        
        Private expenseNameField As String
        
        Private expenseTypeField As String
        
        Private accountExpenseIdField As Integer
        
        '''<remarks/>
        Public Property EmployeeName() As String
            Get
                Return Me.employeeNameField
            End Get
            Set
                Me.employeeNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ClientWithProject() As String
            Get
                Return Me.clientWithProjectField
            End Get
            Set
                Me.clientWithProjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpenseEntryDate() As Date
            Get
                Return Me.expenseEntryDateField
            End Get
            Set
                Me.expenseEntryDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Amount() As Double
            Get
                Return Me.amountField
            End Get
            Set
                Me.amountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpenseName() As String
            Get
                Return Me.expenseNameField
            End Get
            Set
                Me.expenseNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpenseType() As String
            Get
                Return Me.expenseTypeField
            End Get
            Set
                Me.expenseTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountExpenseId() As Integer
            Get
                Return Me.accountExpenseIdField
            End Get
            Set
                Me.accountExpenseIdField = value
            End Set
        End Property
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("AccountCurrency"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class AccountCurrency
        Inherits Global.System.Data.DataSet
        
        Private tableAccountCurrency As AccountCurrencyDataTable
        
        Private tablevueAccountCurrency As vueAccountCurrencyDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("AccountCurrency")) Is Nothing) Then
                    MyBase.Tables.Add(New AccountCurrencyDataTable(ds.Tables("AccountCurrency")))
                End If
                If (Not (ds.Tables("vueAccountCurrency")) Is Nothing) Then
                    MyBase.Tables.Add(New vueAccountCurrencyDataTable(ds.Tables("vueAccountCurrency")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property _AccountCurrency() As AccountCurrencyDataTable
            Get
                Return Me.tableAccountCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property vueAccountCurrency() As vueAccountCurrencyDataTable
            Get
                Return Me.tablevueAccountCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.BrowsableAttribute(true),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As AccountCurrency = CType(MyBase.Clone,AccountCurrency)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If (Not (ds.Tables("AccountCurrency")) Is Nothing) Then
                    MyBase.Tables.Add(New AccountCurrencyDataTable(ds.Tables("AccountCurrency")))
                End If
                If (Not (ds.Tables("vueAccountCurrency")) Is Nothing) Then
                    MyBase.Tables.Add(New vueAccountCurrencyDataTable(ds.Tables("vueAccountCurrency")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableAccountCurrency = CType(MyBase.Tables("AccountCurrency"),AccountCurrencyDataTable)
            If (initTable = true) Then
                If (Not (Me.tableAccountCurrency) Is Nothing) Then
                    Me.tableAccountCurrency.InitVars
                End If
            End If
            Me.tablevueAccountCurrency = CType(MyBase.Tables("vueAccountCurrency"),vueAccountCurrencyDataTable)
            If (initTable = true) Then
                If (Not (Me.tablevueAccountCurrency) Is Nothing) Then
                    Me.tablevueAccountCurrency.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.DataSetName = "AccountCurrency"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/AccountCurrency.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableAccountCurrency = New AccountCurrencyDataTable()
            MyBase.Tables.Add(Me.tableAccountCurrency)
            Me.tablevueAccountCurrency = New vueAccountCurrencyDataTable()
            MyBase.Tables.Add(Me.tablevueAccountCurrency)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerialize_AccountCurrency() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializevueAccountCurrency() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As AccountCurrency = New AccountCurrency()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub AccountCurrencyRowChangeEventHandler(ByVal sender As Object, ByVal e As AccountCurrencyRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub vueAccountCurrencyRowChangeEventHandler(ByVal sender As Object, ByVal e As vueAccountCurrencyRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class AccountCurrencyDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnAccountCurrencyId As Global.System.Data.DataColumn
            
            Private columnAccountCurrencyExchangeRateId As Global.System.Data.DataColumn
            
            Private columnSystemCurrencyId As Global.System.Data.DataColumn
            
            Private columnAccountId As Global.System.Data.DataColumn
            
            Private columnDisabled As Global.System.Data.DataColumn
            
            Private columnMasterAccountCurrencyId As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "AccountCurrency"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property AccountCurrencyIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAccountCurrencyId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property AccountCurrencyExchangeRateIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAccountCurrencyExchangeRateId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SystemCurrencyIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSystemCurrencyId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property AccountIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAccountId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DisabledColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDisabled
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property MasterAccountCurrencyIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMasterAccountCurrencyId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As AccountCurrencyRow
                Get
                    Return CType(Me.Rows(index),AccountCurrencyRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event AccountCurrencyRowChanging As AccountCurrencyRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event AccountCurrencyRowChanged As AccountCurrencyRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event AccountCurrencyRowDeleting As AccountCurrencyRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event AccountCurrencyRowDeleted As AccountCurrencyRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddAccountCurrencyRow(ByVal row As AccountCurrencyRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddAccountCurrencyRow(ByVal AccountCurrencyExchangeRateId As Integer, ByVal SystemCurrencyId As Integer, ByVal AccountId As Integer, ByVal Disabled As Boolean, ByVal MasterAccountCurrencyId As Short) As AccountCurrencyRow
                Dim rowAccountCurrencyRow As AccountCurrencyRow = CType(Me.NewRow,AccountCurrencyRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, AccountCurrencyExchangeRateId, SystemCurrencyId, AccountId, Disabled, MasterAccountCurrencyId}
                rowAccountCurrencyRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowAccountCurrencyRow)
                Return rowAccountCurrencyRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByAccountCurrencyId(ByVal AccountCurrencyId As Integer) As AccountCurrencyRow
                Return CType(Me.Rows.Find(New Object() {AccountCurrencyId}),AccountCurrencyRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As AccountCurrencyDataTable = CType(MyBase.Clone,AccountCurrencyDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New AccountCurrencyDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnAccountCurrencyId = MyBase.Columns("AccountCurrencyId")
                Me.columnAccountCurrencyExchangeRateId = MyBase.Columns("AccountCurrencyExchangeRateId")
                Me.columnSystemCurrencyId = MyBase.Columns("SystemCurrencyId")
                Me.columnAccountId = MyBase.Columns("AccountId")
                Me.columnDisabled = MyBase.Columns("Disabled")
                Me.columnMasterAccountCurrencyId = MyBase.Columns("MasterAccountCurrencyId")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnAccountCurrencyId = New Global.System.Data.DataColumn("AccountCurrencyId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAccountCurrencyId)
                Me.columnAccountCurrencyExchangeRateId = New Global.System.Data.DataColumn("AccountCurrencyExchangeRateId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAccountCurrencyExchangeRateId)
                Me.columnSystemCurrencyId = New Global.System.Data.DataColumn("SystemCurrencyId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSystemCurrencyId)
                Me.columnAccountId = New Global.System.Data.DataColumn("AccountId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAccountId)
                Me.columnDisabled = New Global.System.Data.DataColumn("Disabled", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDisabled)
                Me.columnMasterAccountCurrencyId = New Global.System.Data.DataColumn("MasterAccountCurrencyId", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMasterAccountCurrencyId)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAccountCurrencyId}, true))
                Me.columnAccountCurrencyId.AutoIncrement = true
                Me.columnAccountCurrencyId.AllowDBNull = false
                Me.columnAccountCurrencyId.ReadOnly = true
                Me.columnAccountCurrencyId.Unique = true
                Me.columnSystemCurrencyId.AllowDBNull = false
                Me.columnAccountId.AllowDBNull = false
                Me.columnDisabled.AllowDBNull = false
                Me.ExtendedProperties.Add("Generator_TablePropName", "_AccountCurrency")
                Me.ExtendedProperties.Add("Generator_UserTableName", "AccountCurrency")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewAccountCurrencyRow() As AccountCurrencyRow
                Return CType(Me.NewRow,AccountCurrencyRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New AccountCurrencyRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(AccountCurrencyRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.AccountCurrencyRowChangedEvent) Is Nothing) Then
                    RaiseEvent AccountCurrencyRowChanged(Me, New AccountCurrencyRowChangeEvent(CType(e.Row,AccountCurrencyRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.AccountCurrencyRowChangingEvent) Is Nothing) Then
                    RaiseEvent AccountCurrencyRowChanging(Me, New AccountCurrencyRowChangeEvent(CType(e.Row,AccountCurrencyRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.AccountCurrencyRowDeletedEvent) Is Nothing) Then
                    RaiseEvent AccountCurrencyRowDeleted(Me, New AccountCurrencyRowChangeEvent(CType(e.Row,AccountCurrencyRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.AccountCurrencyRowDeletingEvent) Is Nothing) Then
                    RaiseEvent AccountCurrencyRowDeleting(Me, New AccountCurrencyRowChangeEvent(CType(e.Row,AccountCurrencyRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveAccountCurrencyRow(ByVal row As AccountCurrencyRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AccountCurrency = New AccountCurrency()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "AccountCurrencyDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class vueAccountCurrencyDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnCurrencyCode As Global.System.Data.DataColumn
            
            Private columnCurrency As Global.System.Data.DataColumn
            
            Private columnDisabled As Global.System.Data.DataColumn
            
            Private columnAccountId As Global.System.Data.DataColumn
            
            Private columnAccountCurrencyId As Global.System.Data.DataColumn
            
            Private columnAccountCurrencyExchangeRateId As Global.System.Data.DataColumn
            
            Private columnExchangeRate As Global.System.Data.DataColumn
            
            Private columnExchangeRateEffectiveStartDate As Global.System.Data.DataColumn
            
            Private columnExchangeRateEffectiveEndDate As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "vueAccountCurrency"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CurrencyCodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCurrencyCode
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCurrency
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DisabledColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDisabled
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property AccountIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAccountId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property AccountCurrencyIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAccountCurrencyId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property AccountCurrencyExchangeRateIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAccountCurrencyExchangeRateId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ExchangeRateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnExchangeRate
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ExchangeRateEffectiveStartDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnExchangeRateEffectiveStartDate
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ExchangeRateEffectiveEndDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnExchangeRateEffectiveEndDate
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As vueAccountCurrencyRow
                Get
                    Return CType(Me.Rows(index),vueAccountCurrencyRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event vueAccountCurrencyRowChanging As vueAccountCurrencyRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event vueAccountCurrencyRowChanged As vueAccountCurrencyRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event vueAccountCurrencyRowDeleting As vueAccountCurrencyRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event vueAccountCurrencyRowDeleted As vueAccountCurrencyRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddvueAccountCurrencyRow(ByVal row As vueAccountCurrencyRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddvueAccountCurrencyRow(ByVal CurrencyCode As String, ByVal Currency As String, ByVal Disabled As Boolean, ByVal AccountId As Integer, ByVal AccountCurrencyId As Integer, ByVal AccountCurrencyExchangeRateId As Integer, ByVal ExchangeRate As Double, ByVal ExchangeRateEffectiveStartDate As Date, ByVal ExchangeRateEffectiveEndDate As Date) As vueAccountCurrencyRow
                Dim rowvueAccountCurrencyRow As vueAccountCurrencyRow = CType(Me.NewRow,vueAccountCurrencyRow)
                Dim columnValuesArray() As Object = New Object() {CurrencyCode, Currency, Disabled, AccountId, AccountCurrencyId, AccountCurrencyExchangeRateId, ExchangeRate, ExchangeRateEffectiveStartDate, ExchangeRateEffectiveEndDate}
                rowvueAccountCurrencyRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowvueAccountCurrencyRow)
                Return rowvueAccountCurrencyRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As vueAccountCurrencyDataTable = CType(MyBase.Clone,vueAccountCurrencyDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New vueAccountCurrencyDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnCurrencyCode = MyBase.Columns("CurrencyCode")
                Me.columnCurrency = MyBase.Columns("Currency")
                Me.columnDisabled = MyBase.Columns("Disabled")
                Me.columnAccountId = MyBase.Columns("AccountId")
                Me.columnAccountCurrencyId = MyBase.Columns("AccountCurrencyId")
                Me.columnAccountCurrencyExchangeRateId = MyBase.Columns("AccountCurrencyExchangeRateId")
                Me.columnExchangeRate = MyBase.Columns("ExchangeRate")
                Me.columnExchangeRateEffectiveStartDate = MyBase.Columns("ExchangeRateEffectiveStartDate")
                Me.columnExchangeRateEffectiveEndDate = MyBase.Columns("ExchangeRateEffectiveEndDate")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnCurrencyCode = New Global.System.Data.DataColumn("CurrencyCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCurrencyCode)
                Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCurrency)
                Me.columnDisabled = New Global.System.Data.DataColumn("Disabled", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDisabled)
                Me.columnAccountId = New Global.System.Data.DataColumn("AccountId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAccountId)
                Me.columnAccountCurrencyId = New Global.System.Data.DataColumn("AccountCurrencyId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAccountCurrencyId)
                Me.columnAccountCurrencyExchangeRateId = New Global.System.Data.DataColumn("AccountCurrencyExchangeRateId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAccountCurrencyExchangeRateId)
                Me.columnExchangeRate = New Global.System.Data.DataColumn("ExchangeRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnExchangeRate)
                Me.columnExchangeRateEffectiveStartDate = New Global.System.Data.DataColumn("ExchangeRateEffectiveStartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnExchangeRateEffectiveStartDate)
                Me.columnExchangeRateEffectiveEndDate = New Global.System.Data.DataColumn("ExchangeRateEffectiveEndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnExchangeRateEffectiveEndDate)
                Me.columnCurrencyCode.MaxLength = 15
                Me.columnCurrency.MaxLength = 100
                Me.columnDisabled.AllowDBNull = false
                Me.columnAccountId.AllowDBNull = false
                Me.columnAccountCurrencyId.AllowDBNull = false
                Me.columnAccountCurrencyExchangeRateId.AllowDBNull = false
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewvueAccountCurrencyRow() As vueAccountCurrencyRow
                Return CType(Me.NewRow,vueAccountCurrencyRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New vueAccountCurrencyRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(vueAccountCurrencyRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.vueAccountCurrencyRowChangedEvent) Is Nothing) Then
                    RaiseEvent vueAccountCurrencyRowChanged(Me, New vueAccountCurrencyRowChangeEvent(CType(e.Row,vueAccountCurrencyRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.vueAccountCurrencyRowChangingEvent) Is Nothing) Then
                    RaiseEvent vueAccountCurrencyRowChanging(Me, New vueAccountCurrencyRowChangeEvent(CType(e.Row,vueAccountCurrencyRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.vueAccountCurrencyRowDeletedEvent) Is Nothing) Then
                    RaiseEvent vueAccountCurrencyRowDeleted(Me, New vueAccountCurrencyRowChangeEvent(CType(e.Row,vueAccountCurrencyRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.vueAccountCurrencyRowDeletingEvent) Is Nothing) Then
                    RaiseEvent vueAccountCurrencyRowDeleting(Me, New vueAccountCurrencyRowChangeEvent(CType(e.Row,vueAccountCurrencyRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemovevueAccountCurrencyRow(ByVal row As vueAccountCurrencyRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As AccountCurrency = New AccountCurrency()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "vueAccountCurrencyDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class AccountCurrencyRow
            Inherits Global.System.Data.DataRow
            
            Private tableAccountCurrency As AccountCurrencyDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableAccountCurrency = CType(Me.Table,AccountCurrencyDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property AccountCurrencyId() As Integer
                Get
                    Return CType(Me(Me.tableAccountCurrency.AccountCurrencyIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableAccountCurrency.AccountCurrencyIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property AccountCurrencyExchangeRateId() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableAccountCurrency.AccountCurrencyExchangeRateIdColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'AccountCurrencyExchangeRateId' in table 'AccountCurrency' i"& _ 
                                "s DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableAccountCurrency.AccountCurrencyExchangeRateIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SystemCurrencyId() As Integer
                Get
                    Return CType(Me(Me.tableAccountCurrency.SystemCurrencyIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableAccountCurrency.SystemCurrencyIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property AccountId() As Integer
                Get
                    Return CType(Me(Me.tableAccountCurrency.AccountIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableAccountCurrency.AccountIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Disabled() As Boolean
                Get
                    Return CType(Me(Me.tableAccountCurrency.DisabledColumn),Boolean)
                End Get
                Set
                    Me(Me.tableAccountCurrency.DisabledColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property MasterAccountCurrencyId() As Short
                Get
                    Try 
                        Return CType(Me(Me.tableAccountCurrency.MasterAccountCurrencyIdColumn),Short)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MasterAccountCurrencyId' in table 'AccountCurrency' is DBNu"& _ 
                                "ll.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableAccountCurrency.MasterAccountCurrencyIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsAccountCurrencyExchangeRateIdNull() As Boolean
                Return Me.IsNull(Me.tableAccountCurrency.AccountCurrencyExchangeRateIdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetAccountCurrencyExchangeRateIdNull()
                Me(Me.tableAccountCurrency.AccountCurrencyExchangeRateIdColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsMasterAccountCurrencyIdNull() As Boolean
                Return Me.IsNull(Me.tableAccountCurrency.MasterAccountCurrencyIdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetMasterAccountCurrencyIdNull()
                Me(Me.tableAccountCurrency.MasterAccountCurrencyIdColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class vueAccountCurrencyRow
            Inherits Global.System.Data.DataRow
            
            Private tablevueAccountCurrency As vueAccountCurrencyDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tablevueAccountCurrency = CType(Me.Table,vueAccountCurrencyDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CurrencyCode() As String
                Get
                    Try 
                        Return CType(Me(Me.tablevueAccountCurrency.CurrencyCodeColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CurrencyCode' in table 'vueAccountCurrency' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablevueAccountCurrency.CurrencyCodeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Currency() As String
                Get
                    Try 
                        Return CType(Me(Me.tablevueAccountCurrency.CurrencyColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'vueAccountCurrency' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablevueAccountCurrency.CurrencyColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Disabled() As Boolean
                Get
                    Return CType(Me(Me.tablevueAccountCurrency.DisabledColumn),Boolean)
                End Get
                Set
                    Me(Me.tablevueAccountCurrency.DisabledColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property AccountId() As Integer
                Get
                    Return CType(Me(Me.tablevueAccountCurrency.AccountIdColumn),Integer)
                End Get
                Set
                    Me(Me.tablevueAccountCurrency.AccountIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property AccountCurrencyId() As Integer
                Get
                    Return CType(Me(Me.tablevueAccountCurrency.AccountCurrencyIdColumn),Integer)
                End Get
                Set
                    Me(Me.tablevueAccountCurrency.AccountCurrencyIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property AccountCurrencyExchangeRateId() As Integer
                Get
                    Return CType(Me(Me.tablevueAccountCurrency.AccountCurrencyExchangeRateIdColumn),Integer)
                End Get
                Set
                    Me(Me.tablevueAccountCurrency.AccountCurrencyExchangeRateIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ExchangeRate() As Double
                Get
                    Try 
                        Return CType(Me(Me.tablevueAccountCurrency.ExchangeRateColumn),Double)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ExchangeRate' in table 'vueAccountCurrency' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablevueAccountCurrency.ExchangeRateColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ExchangeRateEffectiveStartDate() As Date
                Get
                    Try 
                        Return CType(Me(Me.tablevueAccountCurrency.ExchangeRateEffectiveStartDateColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ExchangeRateEffectiveStartDate' in table 'vueAccountCurrenc"& _ 
                                "y' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablevueAccountCurrency.ExchangeRateEffectiveStartDateColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ExchangeRateEffectiveEndDate() As Date
                Get
                    Try 
                        Return CType(Me(Me.tablevueAccountCurrency.ExchangeRateEffectiveEndDateColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ExchangeRateEffectiveEndDate' in table 'vueAccountCurrency'"& _ 
                                " is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablevueAccountCurrency.ExchangeRateEffectiveEndDateColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCurrencyCodeNull() As Boolean
                Return Me.IsNull(Me.tablevueAccountCurrency.CurrencyCodeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCurrencyCodeNull()
                Me(Me.tablevueAccountCurrency.CurrencyCodeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCurrencyNull() As Boolean
                Return Me.IsNull(Me.tablevueAccountCurrency.CurrencyColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCurrencyNull()
                Me(Me.tablevueAccountCurrency.CurrencyColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsExchangeRateNull() As Boolean
                Return Me.IsNull(Me.tablevueAccountCurrency.ExchangeRateColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetExchangeRateNull()
                Me(Me.tablevueAccountCurrency.ExchangeRateColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsExchangeRateEffectiveStartDateNull() As Boolean
                Return Me.IsNull(Me.tablevueAccountCurrency.ExchangeRateEffectiveStartDateColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetExchangeRateEffectiveStartDateNull()
                Me(Me.tablevueAccountCurrency.ExchangeRateEffectiveStartDateColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsExchangeRateEffectiveEndDateNull() As Boolean
                Return Me.IsNull(Me.tablevueAccountCurrency.ExchangeRateEffectiveEndDateColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetExchangeRateEffectiveEndDateNull()
                Me(Me.tablevueAccountCurrency.ExchangeRateEffectiveEndDateColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class AccountCurrencyRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As AccountCurrencyRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As AccountCurrencyRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As AccountCurrencyRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class vueAccountCurrencyRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As vueAccountCurrencyRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As vueAccountCurrencyRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As vueAccountCurrencyRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub AddExpenseEntryCompletedEventHandler(ByVal sender As Object, ByVal e As AddExpenseEntryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExpenseEntryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ExpenseEntryForMobileObjectCompletedEventHandler(ByVal sender As Object, ByVal e As ExpenseEntryForMobileObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExpenseEntryForMobileObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub AccountCurrencyForMobileObjectCompletedEventHandler(ByVal sender As Object, ByVal e As AccountCurrencyForMobileObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AccountCurrencyForMobileObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub AccountPaymentMethodForMobileObjectCompletedEventHandler(ByVal sender As Object, ByVal e As AccountPaymentMethodForMobileObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AccountPaymentMethodForMobileObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub TaxZoneForMobileObjectCompletedEventHandler(ByVal sender As Object, ByVal e As TaxZoneForMobileObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TaxZoneForMobileObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub CurrencyExchangeForMobileObjectCompletedEventHandler(ByVal sender As Object, ByVal e As CurrencyExchangeForMobileObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CurrencyExchangeForMobileObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub AccountExpenseEntryForMobileObjectCompletedEventHandler(ByVal sender As Object, ByVal e As AccountExpenseEntryForMobileObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AccountExpenseEntryForMobileObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ExpenseSheetForMobileObjectCompletedEventHandler(ByVal sender As Object, ByVal e As ExpenseSheetForMobileObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExpenseSheetForMobileObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ShowFieldsByExpenseNameForMobileObjectCompletedEventHandler(ByVal sender As Object, ByVal e As ShowFieldsByExpenseNameForMobileObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShowFieldsByExpenseNameForMobileObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub CalculateAmountByExpenseForMobileObjectCompletedEventHandler(ByVal sender As Object, ByVal e As CalculateAmountByExpenseForMobileObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalculateAmountByExpenseForMobileObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetAllExpenseEntriesByDateRangeCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllExpenseEntriesByDateRangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllExpenseEntriesByDateRangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetExpenseEntriesByEmployeeIdAndDateRangeCompletedEventHandler(ByVal sender As Object, ByVal e As GetExpenseEntriesByEmployeeIdAndDateRangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExpenseEntriesByEmployeeIdAndDateRangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub AddExpenseNameCompletedEventHandler(ByVal sender As Object, ByVal e As AddExpenseNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExpenseNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetExpenseNamesCompletedEventHandler(ByVal sender As Object, ByVal e As GetExpenseNamesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExpenseNamesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetExpenseApprovalTypeIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetExpenseApprovalTypeIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExpenseApprovalTypeIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetExpenseSheetByDateForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As GetExpenseSheetByDateForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExpenseSheetByDateForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetExpenseEntriesByExpenseSheetIdForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As GetExpenseEntriesByExpenseSheetIdForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExpenseEntriesByExpenseSheetIdForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetExpenseEntriesByExpenseEntryIdForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As GetExpenseEntriesByExpenseEntryIdForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExpenseEntriesByExpenseEntryIdForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetExpenseNameByAccountIdForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As GetExpenseNameByAccountIdForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExpenseNameByAccountIdForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetPaymentMethodsByAccountIdForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As GetPaymentMethodsByAccountIdForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPaymentMethodsByAccountIdForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetAccountCurrenciesByAccountIdForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountCurrenciesByAccountIdForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountCurrenciesByAccountIdForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetTaxZoneByAccountIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaxZoneByAccountIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaxZoneByAccountIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetExpenseTypeNameByExpenseTypeIdForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As GetExpenseTypeNameByExpenseTypeIdForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExpenseTypeNameByExpenseTypeIdForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetTaxZoneByTaxZoneIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaxZoneByTaxZoneIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaxZoneByTaxZoneIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetTaxCodeByTaxCodeIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaxCodeByTaxCodeIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaxCodeByTaxCodeIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetExpenseNameByExpenseIdForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As GetExpenseNameByExpenseIdForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExpenseNameByExpenseIdForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetReimbursementCurrencyByAccountIdForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As GetReimbursementCurrencyByAccountIdForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReimbursementCurrencyByAccountIdForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetAccountCurrencyByAccountCurrencyIdForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountCurrencyByAccountCurrencyIdForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountCurrencyByAccountCurrencyIdForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetvueAccountCurrencyByAccountIdAndDisabledCompletedEventHandler(ByVal sender As Object, ByVal e As GetvueAccountCurrencyByAccountIdAndDisabledCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetvueAccountCurrencyByAccountIdAndDisabledCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As AccountCurrency.vueAccountCurrencyDataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),AccountCurrency.vueAccountCurrencyDataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub AddExpenseSheetForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As AddExpenseSheetForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExpenseSheetForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Guid
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Guid)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub UpdateExpenseSheetForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub AddExpenseEntryForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub UpdateExpenseEntryForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ShowFieldsByExpenseForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As ShowFieldsByExpenseForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShowFieldsByExpenseForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub CalculateAmountByExpenseForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As CalculateAmountByExpenseForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalculateAmountByExpenseForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub SubmitExpenseSheetAndEntryCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitExpenseSheetAndEntryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitExpenseSheetAndEntryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub AddAttachmentCompletedEventHandler(ByVal sender As Object, ByVal e As AddAttachmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAttachmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetExpenseApprovalEntriesCompletedEventHandler(ByVal sender As Object, ByVal e As GetExpenseApprovalEntriesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExpenseApprovalEntriesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub UpdateExpenseApprovalsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExpenseApprovalsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExpenseApprovalsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
