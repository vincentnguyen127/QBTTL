'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace Services.TimeLive.Projects
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ProjectsSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class Projects
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private securedWebServiceHeaderValueField As SecuredWebServiceHeader
        
        Private AddProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAssignedProjectsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAssignedProjectsByClientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectNameByProjectIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountEmployeeIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectTypeIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectBillingTypeIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectStatusIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTeamLeadIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectManagerIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectBillingRateTypeIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectMilestoneIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectMilestoneIdByProjectIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.TimeLive.Quickbooks.Integrator.My.MySettings.Default.TimeLive_Integration_Quickbooks_Services_TimeLive_Projects_Projects
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property SecuredWebServiceHeaderValue() As SecuredWebServiceHeader
            Get
                Return Me.securedWebServiceHeaderValueField
            End Get
            Set
                Me.securedWebServiceHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AddProjectCompleted As AddProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectsCompleted As GetProjectsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAssignedProjectsCompleted As GetAssignedProjectsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAssignedProjectsByClientCompleted As GetAssignedProjectsByClientCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectNameByProjectIdCompleted As GetProjectNameByProjectIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountEmployeeIdCompleted As GetAccountEmployeeIdCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertProjectCompleted As InsertProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectIdCompleted As GetProjectIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectTypeIdCompleted As GetProjectTypeIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectBillingTypeIdCompleted As GetProjectBillingTypeIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectStatusIdCompleted As GetProjectStatusIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTeamLeadIdCompleted As GetTeamLeadIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectManagerIdCompleted As GetProjectManagerIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectBillingRateTypeIdCompleted As GetProjectBillingRateTypeIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectMilestoneIdCompleted As GetProjectMilestoneIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectMilestoneIdByProjectIdCompleted As GetProjectMilestoneIdByProjectIdCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddProject(ByVal objProject As Project) As String
            Dim results() As Object = Me.Invoke("AddProject", New Object() {objProject})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddProjectAsync(ByVal objProject As Project)
            Me.AddProjectAsync(objProject, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddProjectAsync(ByVal objProject As Project, ByVal userState As Object)
            If (Me.AddProjectOperationCompleted Is Nothing) Then
                Me.AddProjectOperationCompleted = AddressOf Me.OnAddProjectOperationCompleted
            End If
            Me.InvokeAsync("AddProject", New Object() {objProject}, Me.AddProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddProjectCompleted(Me, New AddProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjects", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjects() As Object()
            Dim results() As Object = Me.Invoke("GetProjects", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectsAsync()
            Me.GetProjectsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectsAsync(ByVal userState As Object)
            If (Me.GetProjectsOperationCompleted Is Nothing) Then
                Me.GetProjectsOperationCompleted = AddressOf Me.OnGetProjectsOperationCompleted
            End If
            Me.InvokeAsync("GetProjects", New Object(-1) {}, Me.GetProjectsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectsCompleted(Me, New GetProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAssignedProjects", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAssignedProjects() As Object()
            Dim results() As Object = Me.Invoke("GetAssignedProjects", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAssignedProjectsAsync()
            Me.GetAssignedProjectsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAssignedProjectsAsync(ByVal userState As Object)
            If (Me.GetAssignedProjectsOperationCompleted Is Nothing) Then
                Me.GetAssignedProjectsOperationCompleted = AddressOf Me.OnGetAssignedProjectsOperationCompleted
            End If
            Me.InvokeAsync("GetAssignedProjects", New Object(-1) {}, Me.GetAssignedProjectsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAssignedProjectsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAssignedProjectsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAssignedProjectsCompleted(Me, New GetAssignedProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAssignedProjectsByClient", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAssignedProjectsByClient(ByVal AccountClientId As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetAssignedProjectsByClient", New Object() {AccountClientId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAssignedProjectsByClientAsync(ByVal AccountClientId As Integer)
            Me.GetAssignedProjectsByClientAsync(AccountClientId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAssignedProjectsByClientAsync(ByVal AccountClientId As Integer, ByVal userState As Object)
            If (Me.GetAssignedProjectsByClientOperationCompleted Is Nothing) Then
                Me.GetAssignedProjectsByClientOperationCompleted = AddressOf Me.OnGetAssignedProjectsByClientOperationCompleted
            End If
            Me.InvokeAsync("GetAssignedProjectsByClient", New Object() {AccountClientId}, Me.GetAssignedProjectsByClientOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAssignedProjectsByClientOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAssignedProjectsByClientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAssignedProjectsByClientCompleted(Me, New GetAssignedProjectsByClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectNameByProjectId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectNameByProjectId(ByVal AccountProjectId As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetProjectNameByProjectId", New Object() {AccountProjectId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectNameByProjectIdAsync(ByVal AccountProjectId As Integer)
            Me.GetProjectNameByProjectIdAsync(AccountProjectId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectNameByProjectIdAsync(ByVal AccountProjectId As Integer, ByVal userState As Object)
            If (Me.GetProjectNameByProjectIdOperationCompleted Is Nothing) Then
                Me.GetProjectNameByProjectIdOperationCompleted = AddressOf Me.OnGetProjectNameByProjectIdOperationCompleted
            End If
            Me.InvokeAsync("GetProjectNameByProjectId", New Object() {AccountProjectId}, Me.GetProjectNameByProjectIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectNameByProjectIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectNameByProjectIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectNameByProjectIdCompleted(Me, New GetProjectNameByProjectIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountEmployeeId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountEmployeeId(ByVal Username As String, ByVal Password As String) As Integer
            Dim results() As Object = Me.Invoke("GetAccountEmployeeId", New Object() {Username, Password})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountEmployeeIdAsync(ByVal Username As String, ByVal Password As String)
            Me.GetAccountEmployeeIdAsync(Username, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountEmployeeIdAsync(ByVal Username As String, ByVal Password As String, ByVal userState As Object)
            If (Me.GetAccountEmployeeIdOperationCompleted Is Nothing) Then
                Me.GetAccountEmployeeIdOperationCompleted = AddressOf Me.OnGetAccountEmployeeIdOperationCompleted
            End If
            Me.InvokeAsync("GetAccountEmployeeId", New Object() {Username, Password}, Me.GetAccountEmployeeIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountEmployeeIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountEmployeeIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountEmployeeIdCompleted(Me, New GetAccountEmployeeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InsertProject( _
                    ByVal AccountProjectTypeId As Integer,  _
                    ByVal AccountClientId As Integer,  _
                    ByVal AccountPartyContactId As Integer,  _
                    ByVal AccountPartyDepartmentId As Integer,  _
                    ByVal ProjectBillingTypeId As Integer,  _
                    ByVal ProjectName As String,  _
                    ByVal ProjectDescription As String,  _
                    ByVal StartDate As Date,  _
                    ByVal DeadLine As Date,  _
                    ByVal ProjectStatusId As Integer,  _
                    ByVal LeaderEmployeeId As Integer,  _
                    ByVal ProjectManagerEmployeeId As Integer,  _
                    ByVal TimesheetApprovalTypeId As Integer,  _
                    ByVal ExpenseApprovalTypeId As Integer,  _
                    ByVal EstimatedDuration As Double,  _
                    ByVal EstimatedDurationUnit As String,  _
                    ByVal ProjectCode As String,  _
                    ByVal DefaultBillingRate As Decimal,  _
                    ByVal ProjectBillingRateTypeId As Integer,  _
                    ByVal IsTemplate As Boolean,  _
                    ByVal IsProject As Boolean,  _
                    ByVal AccountProjectTemplateId As Integer,  _
                    ByVal CreatedOn As Date,  _
                    ByVal CreatedByEmployeeId As Integer,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer,  _
                    ByVal Completed As Boolean)
            Me.Invoke("InsertProject", New Object() {AccountProjectTypeId, AccountClientId, AccountPartyContactId, AccountPartyDepartmentId, ProjectBillingTypeId, ProjectName, ProjectDescription, StartDate, DeadLine, ProjectStatusId, LeaderEmployeeId, ProjectManagerEmployeeId, TimesheetApprovalTypeId, ExpenseApprovalTypeId, EstimatedDuration, EstimatedDurationUnit, ProjectCode, DefaultBillingRate, ProjectBillingRateTypeId, IsTemplate, IsProject, AccountProjectTemplateId, CreatedOn, CreatedByEmployeeId, ModifiedOn, ModifiedByEmployeeId, Completed})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertProjectAsync( _
                    ByVal AccountProjectTypeId As Integer,  _
                    ByVal AccountClientId As Integer,  _
                    ByVal AccountPartyContactId As Integer,  _
                    ByVal AccountPartyDepartmentId As Integer,  _
                    ByVal ProjectBillingTypeId As Integer,  _
                    ByVal ProjectName As String,  _
                    ByVal ProjectDescription As String,  _
                    ByVal StartDate As Date,  _
                    ByVal DeadLine As Date,  _
                    ByVal ProjectStatusId As Integer,  _
                    ByVal LeaderEmployeeId As Integer,  _
                    ByVal ProjectManagerEmployeeId As Integer,  _
                    ByVal TimesheetApprovalTypeId As Integer,  _
                    ByVal ExpenseApprovalTypeId As Integer,  _
                    ByVal EstimatedDuration As Double,  _
                    ByVal EstimatedDurationUnit As String,  _
                    ByVal ProjectCode As String,  _
                    ByVal DefaultBillingRate As Decimal,  _
                    ByVal ProjectBillingRateTypeId As Integer,  _
                    ByVal IsTemplate As Boolean,  _
                    ByVal IsProject As Boolean,  _
                    ByVal AccountProjectTemplateId As Integer,  _
                    ByVal CreatedOn As Date,  _
                    ByVal CreatedByEmployeeId As Integer,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer,  _
                    ByVal Completed As Boolean)
            Me.InsertProjectAsync(AccountProjectTypeId, AccountClientId, AccountPartyContactId, AccountPartyDepartmentId, ProjectBillingTypeId, ProjectName, ProjectDescription, StartDate, DeadLine, ProjectStatusId, LeaderEmployeeId, ProjectManagerEmployeeId, TimesheetApprovalTypeId, ExpenseApprovalTypeId, EstimatedDuration, EstimatedDurationUnit, ProjectCode, DefaultBillingRate, ProjectBillingRateTypeId, IsTemplate, IsProject, AccountProjectTemplateId, CreatedOn, CreatedByEmployeeId, ModifiedOn, ModifiedByEmployeeId, Completed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertProjectAsync( _
                    ByVal AccountProjectTypeId As Integer,  _
                    ByVal AccountClientId As Integer,  _
                    ByVal AccountPartyContactId As Integer,  _
                    ByVal AccountPartyDepartmentId As Integer,  _
                    ByVal ProjectBillingTypeId As Integer,  _
                    ByVal ProjectName As String,  _
                    ByVal ProjectDescription As String,  _
                    ByVal StartDate As Date,  _
                    ByVal DeadLine As Date,  _
                    ByVal ProjectStatusId As Integer,  _
                    ByVal LeaderEmployeeId As Integer,  _
                    ByVal ProjectManagerEmployeeId As Integer,  _
                    ByVal TimesheetApprovalTypeId As Integer,  _
                    ByVal ExpenseApprovalTypeId As Integer,  _
                    ByVal EstimatedDuration As Double,  _
                    ByVal EstimatedDurationUnit As String,  _
                    ByVal ProjectCode As String,  _
                    ByVal DefaultBillingRate As Decimal,  _
                    ByVal ProjectBillingRateTypeId As Integer,  _
                    ByVal IsTemplate As Boolean,  _
                    ByVal IsProject As Boolean,  _
                    ByVal AccountProjectTemplateId As Integer,  _
                    ByVal CreatedOn As Date,  _
                    ByVal CreatedByEmployeeId As Integer,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer,  _
                    ByVal Completed As Boolean,  _
                    ByVal userState As Object)
            If (Me.InsertProjectOperationCompleted Is Nothing) Then
                Me.InsertProjectOperationCompleted = AddressOf Me.OnInsertProjectOperationCompleted
            End If
            Me.InvokeAsync("InsertProject", New Object() {AccountProjectTypeId, AccountClientId, AccountPartyContactId, AccountPartyDepartmentId, ProjectBillingTypeId, ProjectName, ProjectDescription, StartDate, DeadLine, ProjectStatusId, LeaderEmployeeId, ProjectManagerEmployeeId, TimesheetApprovalTypeId, ExpenseApprovalTypeId, EstimatedDuration, EstimatedDurationUnit, ProjectCode, DefaultBillingRate, ProjectBillingRateTypeId, IsTemplate, IsProject, AccountProjectTemplateId, CreatedOn, CreatedByEmployeeId, ModifiedOn, ModifiedByEmployeeId, Completed}, Me.InsertProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertProjectCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectId(ByVal ProjectName As String) As Integer
            Dim results() As Object = Me.Invoke("GetProjectId", New Object() {ProjectName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectIdAsync(ByVal ProjectName As String)
            Me.GetProjectIdAsync(ProjectName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectIdAsync(ByVal ProjectName As String, ByVal userState As Object)
            If (Me.GetProjectIdOperationCompleted Is Nothing) Then
                Me.GetProjectIdOperationCompleted = AddressOf Me.OnGetProjectIdOperationCompleted
            End If
            Me.InvokeAsync("GetProjectId", New Object() {ProjectName}, Me.GetProjectIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectIdCompleted(Me, New GetProjectIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectTypeId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectTypeId() As Integer
            Dim results() As Object = Me.Invoke("GetProjectTypeId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectTypeIdAsync()
            Me.GetProjectTypeIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectTypeIdAsync(ByVal userState As Object)
            If (Me.GetProjectTypeIdOperationCompleted Is Nothing) Then
                Me.GetProjectTypeIdOperationCompleted = AddressOf Me.OnGetProjectTypeIdOperationCompleted
            End If
            Me.InvokeAsync("GetProjectTypeId", New Object(-1) {}, Me.GetProjectTypeIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectTypeIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectTypeIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectTypeIdCompleted(Me, New GetProjectTypeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectBillingTypeId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectBillingTypeId() As Integer
            Dim results() As Object = Me.Invoke("GetProjectBillingTypeId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectBillingTypeIdAsync()
            Me.GetProjectBillingTypeIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectBillingTypeIdAsync(ByVal userState As Object)
            If (Me.GetProjectBillingTypeIdOperationCompleted Is Nothing) Then
                Me.GetProjectBillingTypeIdOperationCompleted = AddressOf Me.OnGetProjectBillingTypeIdOperationCompleted
            End If
            Me.InvokeAsync("GetProjectBillingTypeId", New Object(-1) {}, Me.GetProjectBillingTypeIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectBillingTypeIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectBillingTypeIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectBillingTypeIdCompleted(Me, New GetProjectBillingTypeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectStatusId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectStatusId() As Integer
            Dim results() As Object = Me.Invoke("GetProjectStatusId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectStatusIdAsync()
            Me.GetProjectStatusIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectStatusIdAsync(ByVal userState As Object)
            If (Me.GetProjectStatusIdOperationCompleted Is Nothing) Then
                Me.GetProjectStatusIdOperationCompleted = AddressOf Me.OnGetProjectStatusIdOperationCompleted
            End If
            Me.InvokeAsync("GetProjectStatusId", New Object(-1) {}, Me.GetProjectStatusIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectStatusIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectStatusIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectStatusIdCompleted(Me, New GetProjectStatusIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTeamLeadId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTeamLeadId() As Integer
            Dim results() As Object = Me.Invoke("GetTeamLeadId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTeamLeadIdAsync()
            Me.GetTeamLeadIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTeamLeadIdAsync(ByVal userState As Object)
            If (Me.GetTeamLeadIdOperationCompleted Is Nothing) Then
                Me.GetTeamLeadIdOperationCompleted = AddressOf Me.OnGetTeamLeadIdOperationCompleted
            End If
            Me.InvokeAsync("GetTeamLeadId", New Object(-1) {}, Me.GetTeamLeadIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTeamLeadIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTeamLeadIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTeamLeadIdCompleted(Me, New GetTeamLeadIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectManagerId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectManagerId() As Integer
            Dim results() As Object = Me.Invoke("GetProjectManagerId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectManagerIdAsync()
            Me.GetProjectManagerIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectManagerIdAsync(ByVal userState As Object)
            If (Me.GetProjectManagerIdOperationCompleted Is Nothing) Then
                Me.GetProjectManagerIdOperationCompleted = AddressOf Me.OnGetProjectManagerIdOperationCompleted
            End If
            Me.InvokeAsync("GetProjectManagerId", New Object(-1) {}, Me.GetProjectManagerIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectManagerIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectManagerIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectManagerIdCompleted(Me, New GetProjectManagerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectBillingRateTypeId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectBillingRateTypeId() As Integer
            Dim results() As Object = Me.Invoke("GetProjectBillingRateTypeId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectBillingRateTypeIdAsync()
            Me.GetProjectBillingRateTypeIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectBillingRateTypeIdAsync(ByVal userState As Object)
            If (Me.GetProjectBillingRateTypeIdOperationCompleted Is Nothing) Then
                Me.GetProjectBillingRateTypeIdOperationCompleted = AddressOf Me.OnGetProjectBillingRateTypeIdOperationCompleted
            End If
            Me.InvokeAsync("GetProjectBillingRateTypeId", New Object(-1) {}, Me.GetProjectBillingRateTypeIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectBillingRateTypeIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectBillingRateTypeIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectBillingRateTypeIdCompleted(Me, New GetProjectBillingRateTypeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectMilestoneId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectMilestoneId() As Integer
            Dim results() As Object = Me.Invoke("GetProjectMilestoneId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectMilestoneIdAsync()
            Me.GetProjectMilestoneIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectMilestoneIdAsync(ByVal userState As Object)
            If (Me.GetProjectMilestoneIdOperationCompleted Is Nothing) Then
                Me.GetProjectMilestoneIdOperationCompleted = AddressOf Me.OnGetProjectMilestoneIdOperationCompleted
            End If
            Me.InvokeAsync("GetProjectMilestoneId", New Object(-1) {}, Me.GetProjectMilestoneIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectMilestoneIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectMilestoneIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectMilestoneIdCompleted(Me, New GetProjectMilestoneIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectMilestoneIdByProjectId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectMilestoneIdByProjectId(ByVal AccountProjectId As Integer) As Integer
            Dim results() As Object = Me.Invoke("GetProjectMilestoneIdByProjectId", New Object() {AccountProjectId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectMilestoneIdByProjectIdAsync(ByVal AccountProjectId As Integer)
            Me.GetProjectMilestoneIdByProjectIdAsync(AccountProjectId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectMilestoneIdByProjectIdAsync(ByVal AccountProjectId As Integer, ByVal userState As Object)
            If (Me.GetProjectMilestoneIdByProjectIdOperationCompleted Is Nothing) Then
                Me.GetProjectMilestoneIdByProjectIdOperationCompleted = AddressOf Me.OnGetProjectMilestoneIdByProjectIdOperationCompleted
            End If
            Me.InvokeAsync("GetProjectMilestoneIdByProjectId", New Object() {AccountProjectId}, Me.GetProjectMilestoneIdByProjectIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectMilestoneIdByProjectIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectMilestoneIdByProjectIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectMilestoneIdByProjectIdCompleted(Me, New GetProjectMilestoneIdByProjectIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://tempuri.org/", IsNullable:=false)>  _
    Partial Public Class SecuredWebServiceHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private usernameField As String
        
        Private passwordField As String
        
        Private authenticatedTokenField As String
        
        Private accountIdField As Integer
        
        Private accountEmployeeIdField As Integer
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property Username() As String
            Get
                Return Me.usernameField
            End Get
            Set
                Me.usernameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AuthenticatedToken() As String
            Get
                Return Me.authenticatedTokenField
            End Get
            Set
                Me.authenticatedTokenField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountId() As Integer
            Get
                Return Me.accountIdField
            End Get
            Set
                Me.accountIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountEmployeeId() As Integer
            Get
                Return Me.accountEmployeeIdField
            End Get
            Set
                Me.accountEmployeeIdField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Project
        
        Private projectIDField As Integer
        
        Private projectCodeField As String
        
        Private projectNameField As String
        
        Private clientIdField As Integer
        
        Private clientNameField As String
        
        '''<remarks/>
        Public Property ProjectID() As Integer
            Get
                Return Me.projectIDField
            End Get
            Set
                Me.projectIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectCode() As String
            Get
                Return Me.projectCodeField
            End Get
            Set
                Me.projectCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectName() As String
            Get
                Return Me.projectNameField
            End Get
            Set
                Me.projectNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ClientId() As Integer
            Get
                Return Me.clientIdField
            End Get
            Set
                Me.clientIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ClientName() As String
            Get
                Return Me.clientNameField
            End Get
            Set
                Me.clientNameField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub AddProjectCompletedEventHandler(ByVal sender As Object, ByVal e As AddProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetProjectsCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetAssignedProjectsCompletedEventHandler(ByVal sender As Object, ByVal e As GetAssignedProjectsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAssignedProjectsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetAssignedProjectsByClientCompletedEventHandler(ByVal sender As Object, ByVal e As GetAssignedProjectsByClientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAssignedProjectsByClientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetProjectNameByProjectIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectNameByProjectIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectNameByProjectIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetAccountEmployeeIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountEmployeeIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountEmployeeIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub InsertProjectCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetProjectIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetProjectTypeIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectTypeIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectTypeIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetProjectBillingTypeIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectBillingTypeIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectBillingTypeIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetProjectStatusIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectStatusIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectStatusIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetTeamLeadIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetTeamLeadIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTeamLeadIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetProjectManagerIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectManagerIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectManagerIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetProjectBillingRateTypeIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectBillingRateTypeIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectBillingRateTypeIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetProjectMilestoneIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectMilestoneIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectMilestoneIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetProjectMilestoneIdByProjectIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectMilestoneIdByProjectIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectMilestoneIdByProjectIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
