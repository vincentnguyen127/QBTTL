'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace Services.TimeLive.Tasks
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="TasksSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class Tasks
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private securedWebServiceHeaderValueField As SecuredWebServiceHeader
        
        Private AddTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTasksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAssignedTasksForMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAssignedTasksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetParentTaskIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskNameByTaskIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateIsParentInTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskTypeIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskStatusIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskPriorityIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.TimeLive.Quickbooks.Integrator.My.MySettings.Default.TimeLive_Integration_Quickbooks_Services_TimeLive_Tasks_Tasks
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property SecuredWebServiceHeaderValue() As SecuredWebServiceHeader
            Get
                Return Me.securedWebServiceHeaderValueField
            End Get
            Set
                Me.securedWebServiceHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AddTaskCompleted As AddTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTasksCompleted As GetTasksCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAssignedTasksForMobileCompleted As GetAssignedTasksForMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAssignedTasksCompleted As GetAssignedTasksCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertTaskCompleted As InsertTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskIdCompleted As GetTaskIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetParentTaskIdCompleted As GetParentTaskIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskNameByTaskIdCompleted As GetTaskNameByTaskIdCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateIsParentInTaskCompleted As UpdateIsParentInTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskTypeIdCompleted As GetTaskTypeIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskStatusIdCompleted As GetTaskStatusIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskPriorityIdCompleted As GetTaskPriorityIdCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddTask(ByVal objTask As Task) As String
            Dim results() As Object = Me.Invoke("AddTask", New Object() {objTask})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddTaskAsync(ByVal objTask As Task)
            Me.AddTaskAsync(objTask, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddTaskAsync(ByVal objTask As Task, ByVal userState As Object)
            If (Me.AddTaskOperationCompleted Is Nothing) Then
                Me.AddTaskOperationCompleted = AddressOf Me.OnAddTaskOperationCompleted
            End If
            Me.InvokeAsync("AddTask", New Object() {objTask}, Me.AddTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddTaskCompleted(Me, New AddTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTasks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTasks() As Object()
            Dim results() As Object = Me.Invoke("GetTasks", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTasksAsync()
            Me.GetTasksAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTasksAsync(ByVal userState As Object)
            If (Me.GetTasksOperationCompleted Is Nothing) Then
                Me.GetTasksOperationCompleted = AddressOf Me.OnGetTasksOperationCompleted
            End If
            Me.InvokeAsync("GetTasks", New Object(-1) {}, Me.GetTasksOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTasksOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTasksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTasksCompleted(Me, New GetTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAssignedTasksForMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAssignedTasksForMobile(ByVal AccountProjectId As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetAssignedTasksForMobile", New Object() {AccountProjectId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAssignedTasksForMobileAsync(ByVal AccountProjectId As Integer)
            Me.GetAssignedTasksForMobileAsync(AccountProjectId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAssignedTasksForMobileAsync(ByVal AccountProjectId As Integer, ByVal userState As Object)
            If (Me.GetAssignedTasksForMobileOperationCompleted Is Nothing) Then
                Me.GetAssignedTasksForMobileOperationCompleted = AddressOf Me.OnGetAssignedTasksForMobileOperationCompleted
            End If
            Me.InvokeAsync("GetAssignedTasksForMobile", New Object() {AccountProjectId}, Me.GetAssignedTasksForMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAssignedTasksForMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAssignedTasksForMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAssignedTasksForMobileCompleted(Me, New GetAssignedTasksForMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAssignedTasks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAssignedTasks(ByVal AccountProjectId As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetAssignedTasks", New Object() {AccountProjectId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAssignedTasksAsync(ByVal AccountProjectId As Integer)
            Me.GetAssignedTasksAsync(AccountProjectId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAssignedTasksAsync(ByVal AccountProjectId As Integer, ByVal userState As Object)
            If (Me.GetAssignedTasksOperationCompleted Is Nothing) Then
                Me.GetAssignedTasksOperationCompleted = AddressOf Me.OnGetAssignedTasksOperationCompleted
            End If
            Me.InvokeAsync("GetAssignedTasks", New Object() {AccountProjectId}, Me.GetAssignedTasksOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAssignedTasksOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAssignedTasksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAssignedTasksCompleted(Me, New GetAssignedTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InsertTask( _
                    ByVal AccountProjectId As Integer,  _
                    ByVal ParentAccountProjectTaskid As Integer,  _
                    ByVal TaskName As String,  _
                    ByVal TaskDescription As String,  _
                    ByVal AccountTaskTypeId As Integer,  _
                    ByVal Duration As Double,  _
                    ByVal DurationUnit As String,  _
                    ByVal CompletedPercent As Integer,  _
                    ByVal Completed As Boolean,  _
                    ByVal DeadlineDate As Date,  _
                    ByVal TaskStatusId As Integer,  _
                    ByVal AccountPriorityId As Integer,  _
                    ByVal AccountProjectMilestoneId As Integer,  _
                    ByVal IsForAllEmployees As Boolean,  _
                    ByVal IsParentTask As Boolean,  _
                    ByVal CreatedOn As Date,  _
                    ByVal CreatedByEmployeeId As Integer,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer,  _
                    ByVal EstimatedCost As Double,  _
                    ByVal EstimatedTimeSpent As Double,  _
                    ByVal EstimatedTimeSpentUnit As String,  _
                    ByVal IsBillable As Boolean,  _
                    ByVal TaskCode As String,  _
                    ByVal AccountBillingRateId As Integer,  _
                    ByVal IsForAllProjectTask As Boolean,  _
                    ByVal EstimatedCurrencyId As Integer)
            Me.Invoke("InsertTask", New Object() {AccountProjectId, ParentAccountProjectTaskid, TaskName, TaskDescription, AccountTaskTypeId, Duration, DurationUnit, CompletedPercent, Completed, DeadlineDate, TaskStatusId, AccountPriorityId, AccountProjectMilestoneId, IsForAllEmployees, IsParentTask, CreatedOn, CreatedByEmployeeId, ModifiedOn, ModifiedByEmployeeId, EstimatedCost, EstimatedTimeSpent, EstimatedTimeSpentUnit, IsBillable, TaskCode, AccountBillingRateId, IsForAllProjectTask, EstimatedCurrencyId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertTaskAsync( _
                    ByVal AccountProjectId As Integer,  _
                    ByVal ParentAccountProjectTaskid As Integer,  _
                    ByVal TaskName As String,  _
                    ByVal TaskDescription As String,  _
                    ByVal AccountTaskTypeId As Integer,  _
                    ByVal Duration As Double,  _
                    ByVal DurationUnit As String,  _
                    ByVal CompletedPercent As Integer,  _
                    ByVal Completed As Boolean,  _
                    ByVal DeadlineDate As Date,  _
                    ByVal TaskStatusId As Integer,  _
                    ByVal AccountPriorityId As Integer,  _
                    ByVal AccountProjectMilestoneId As Integer,  _
                    ByVal IsForAllEmployees As Boolean,  _
                    ByVal IsParentTask As Boolean,  _
                    ByVal CreatedOn As Date,  _
                    ByVal CreatedByEmployeeId As Integer,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer,  _
                    ByVal EstimatedCost As Double,  _
                    ByVal EstimatedTimeSpent As Double,  _
                    ByVal EstimatedTimeSpentUnit As String,  _
                    ByVal IsBillable As Boolean,  _
                    ByVal TaskCode As String,  _
                    ByVal AccountBillingRateId As Integer,  _
                    ByVal IsForAllProjectTask As Boolean,  _
                    ByVal EstimatedCurrencyId As Integer)
            Me.InsertTaskAsync(AccountProjectId, ParentAccountProjectTaskid, TaskName, TaskDescription, AccountTaskTypeId, Duration, DurationUnit, CompletedPercent, Completed, DeadlineDate, TaskStatusId, AccountPriorityId, AccountProjectMilestoneId, IsForAllEmployees, IsParentTask, CreatedOn, CreatedByEmployeeId, ModifiedOn, ModifiedByEmployeeId, EstimatedCost, EstimatedTimeSpent, EstimatedTimeSpentUnit, IsBillable, TaskCode, AccountBillingRateId, IsForAllProjectTask, EstimatedCurrencyId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertTaskAsync( _
                    ByVal AccountProjectId As Integer,  _
                    ByVal ParentAccountProjectTaskid As Integer,  _
                    ByVal TaskName As String,  _
                    ByVal TaskDescription As String,  _
                    ByVal AccountTaskTypeId As Integer,  _
                    ByVal Duration As Double,  _
                    ByVal DurationUnit As String,  _
                    ByVal CompletedPercent As Integer,  _
                    ByVal Completed As Boolean,  _
                    ByVal DeadlineDate As Date,  _
                    ByVal TaskStatusId As Integer,  _
                    ByVal AccountPriorityId As Integer,  _
                    ByVal AccountProjectMilestoneId As Integer,  _
                    ByVal IsForAllEmployees As Boolean,  _
                    ByVal IsParentTask As Boolean,  _
                    ByVal CreatedOn As Date,  _
                    ByVal CreatedByEmployeeId As Integer,  _
                    ByVal ModifiedOn As Date,  _
                    ByVal ModifiedByEmployeeId As Integer,  _
                    ByVal EstimatedCost As Double,  _
                    ByVal EstimatedTimeSpent As Double,  _
                    ByVal EstimatedTimeSpentUnit As String,  _
                    ByVal IsBillable As Boolean,  _
                    ByVal TaskCode As String,  _
                    ByVal AccountBillingRateId As Integer,  _
                    ByVal IsForAllProjectTask As Boolean,  _
                    ByVal EstimatedCurrencyId As Integer,  _
                    ByVal userState As Object)
            If (Me.InsertTaskOperationCompleted Is Nothing) Then
                Me.InsertTaskOperationCompleted = AddressOf Me.OnInsertTaskOperationCompleted
            End If
            Me.InvokeAsync("InsertTask", New Object() {AccountProjectId, ParentAccountProjectTaskid, TaskName, TaskDescription, AccountTaskTypeId, Duration, DurationUnit, CompletedPercent, Completed, DeadlineDate, TaskStatusId, AccountPriorityId, AccountProjectMilestoneId, IsForAllEmployees, IsParentTask, CreatedOn, CreatedByEmployeeId, ModifiedOn, ModifiedByEmployeeId, EstimatedCost, EstimatedTimeSpent, EstimatedTimeSpentUnit, IsBillable, TaskCode, AccountBillingRateId, IsForAllProjectTask, EstimatedCurrencyId}, Me.InsertTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertTaskCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskId(ByVal TaskName As String) As Integer
            Dim results() As Object = Me.Invoke("GetTaskId", New Object() {TaskName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskIdAsync(ByVal TaskName As String)
            Me.GetTaskIdAsync(TaskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskIdAsync(ByVal TaskName As String, ByVal userState As Object)
            If (Me.GetTaskIdOperationCompleted Is Nothing) Then
                Me.GetTaskIdOperationCompleted = AddressOf Me.OnGetTaskIdOperationCompleted
            End If
            Me.InvokeAsync("GetTaskId", New Object() {TaskName}, Me.GetTaskIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskIdCompleted(Me, New GetTaskIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetParentTaskId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetParentTaskId(ByVal ParentTaskName As String) As Integer
            Dim results() As Object = Me.Invoke("GetParentTaskId", New Object() {ParentTaskName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetParentTaskIdAsync(ByVal ParentTaskName As String)
            Me.GetParentTaskIdAsync(ParentTaskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetParentTaskIdAsync(ByVal ParentTaskName As String, ByVal userState As Object)
            If (Me.GetParentTaskIdOperationCompleted Is Nothing) Then
                Me.GetParentTaskIdOperationCompleted = AddressOf Me.OnGetParentTaskIdOperationCompleted
            End If
            Me.InvokeAsync("GetParentTaskId", New Object() {ParentTaskName}, Me.GetParentTaskIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetParentTaskIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetParentTaskIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetParentTaskIdCompleted(Me, New GetParentTaskIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskNameByTaskId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskNameByTaskId(ByVal AccountProjectTaskId As Integer) As Object()
            Dim results() As Object = Me.Invoke("GetTaskNameByTaskId", New Object() {AccountProjectTaskId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskNameByTaskIdAsync(ByVal AccountProjectTaskId As Integer)
            Me.GetTaskNameByTaskIdAsync(AccountProjectTaskId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskNameByTaskIdAsync(ByVal AccountProjectTaskId As Integer, ByVal userState As Object)
            If (Me.GetTaskNameByTaskIdOperationCompleted Is Nothing) Then
                Me.GetTaskNameByTaskIdOperationCompleted = AddressOf Me.OnGetTaskNameByTaskIdOperationCompleted
            End If
            Me.InvokeAsync("GetTaskNameByTaskId", New Object() {AccountProjectTaskId}, Me.GetTaskNameByTaskIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskNameByTaskIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskNameByTaskIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskNameByTaskIdCompleted(Me, New GetTaskNameByTaskIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateIsParentInTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateIsParentInTask(ByVal AccountProjectTaskId As Integer, ByVal IsParent As Boolean)
            Me.Invoke("UpdateIsParentInTask", New Object() {AccountProjectTaskId, IsParent})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateIsParentInTaskAsync(ByVal AccountProjectTaskId As Integer, ByVal IsParent As Boolean)
            Me.UpdateIsParentInTaskAsync(AccountProjectTaskId, IsParent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateIsParentInTaskAsync(ByVal AccountProjectTaskId As Integer, ByVal IsParent As Boolean, ByVal userState As Object)
            If (Me.UpdateIsParentInTaskOperationCompleted Is Nothing) Then
                Me.UpdateIsParentInTaskOperationCompleted = AddressOf Me.OnUpdateIsParentInTaskOperationCompleted
            End If
            Me.InvokeAsync("UpdateIsParentInTask", New Object() {AccountProjectTaskId, IsParent}, Me.UpdateIsParentInTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateIsParentInTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateIsParentInTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateIsParentInTaskCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskTypeId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskTypeId() As Integer
            Dim results() As Object = Me.Invoke("GetTaskTypeId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskTypeIdAsync()
            Me.GetTaskTypeIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskTypeIdAsync(ByVal userState As Object)
            If (Me.GetTaskTypeIdOperationCompleted Is Nothing) Then
                Me.GetTaskTypeIdOperationCompleted = AddressOf Me.OnGetTaskTypeIdOperationCompleted
            End If
            Me.InvokeAsync("GetTaskTypeId", New Object(-1) {}, Me.GetTaskTypeIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskTypeIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskTypeIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskTypeIdCompleted(Me, New GetTaskTypeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskStatusId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskStatusId() As Integer
            Dim results() As Object = Me.Invoke("GetTaskStatusId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskStatusIdAsync()
            Me.GetTaskStatusIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskStatusIdAsync(ByVal userState As Object)
            If (Me.GetTaskStatusIdOperationCompleted Is Nothing) Then
                Me.GetTaskStatusIdOperationCompleted = AddressOf Me.OnGetTaskStatusIdOperationCompleted
            End If
            Me.InvokeAsync("GetTaskStatusId", New Object(-1) {}, Me.GetTaskStatusIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskStatusIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskStatusIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskStatusIdCompleted(Me, New GetTaskStatusIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskPriorityId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskPriorityId() As Integer
            Dim results() As Object = Me.Invoke("GetTaskPriorityId", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskPriorityIdAsync()
            Me.GetTaskPriorityIdAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskPriorityIdAsync(ByVal userState As Object)
            If (Me.GetTaskPriorityIdOperationCompleted Is Nothing) Then
                Me.GetTaskPriorityIdOperationCompleted = AddressOf Me.OnGetTaskPriorityIdOperationCompleted
            End If
            Me.InvokeAsync("GetTaskPriorityId", New Object(-1) {}, Me.GetTaskPriorityIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskPriorityIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskPriorityIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskPriorityIdCompleted(Me, New GetTaskPriorityIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://tempuri.org/", IsNullable:=false)>  _
    Partial Public Class SecuredWebServiceHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private usernameField As String
        
        Private passwordField As String
        
        Private authenticatedTokenField As String
        
        Private accountIdField As Integer
        
        Private accountEmployeeIdField As Integer
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property Username() As String
            Get
                Return Me.usernameField
            End Get
            Set
                Me.usernameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AuthenticatedToken() As String
            Get
                Return Me.authenticatedTokenField
            End Get
            Set
                Me.authenticatedTokenField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountId() As Integer
            Get
                Return Me.accountIdField
            End Get
            Set
                Me.accountIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountEmployeeId() As Integer
            Get
                Return Me.accountEmployeeIdField
            End Get
            Set
                Me.accountEmployeeIdField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Task
        
        Private taskNameField As String
        
        Private codeField As String
        
        Private itemParentField As String
        
        Private jobParentField As String
        
        Private jobItemParentField As String
        
        Private taskIDField As Integer
        
        '''<remarks/>
        Public Property TaskName() As String
            Get
                Return Me.taskNameField
            End Get
            Set
                Me.taskNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Code() As String
            Get
                Return Me.codeField
            End Get
            Set
                Me.codeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ItemParent() As String
            Get
                Return Me.itemParentField
            End Get
            Set
                Me.itemParentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property JobParent() As String
            Get
                Return Me.jobParentField
            End Get
            Set
                Me.jobParentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property JobItemParent() As String
            Get
                Return Me.jobItemParentField
            End Get
            Set
                Me.jobItemParentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TaskID() As Integer
            Get
                Return Me.taskIDField
            End Get
            Set
                Me.taskIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub AddTaskCompletedEventHandler(ByVal sender As Object, ByVal e As AddTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetTasksCompletedEventHandler(ByVal sender As Object, ByVal e As GetTasksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTasksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetAssignedTasksForMobileCompletedEventHandler(ByVal sender As Object, ByVal e As GetAssignedTasksForMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAssignedTasksForMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetAssignedTasksCompletedEventHandler(ByVal sender As Object, ByVal e As GetAssignedTasksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAssignedTasksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub InsertTaskCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetTaskIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetParentTaskIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetParentTaskIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetParentTaskIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetTaskNameByTaskIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskNameByTaskIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskNameByTaskIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub UpdateIsParentInTaskCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetTaskTypeIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskTypeIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskTypeIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetTaskStatusIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskStatusIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskStatusIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetTaskPriorityIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskPriorityIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskPriorityIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
